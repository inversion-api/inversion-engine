/**
 * This is a gradle multi project build that works with Travis CI to publish:
 *
 *   - Github master branch commits as snapshot builds to oss.jfrog.org 
 *     (aka OJO found @ https://oss.jfrog.org/artifactory/oss-snapshot-local/)
 *       
 *   - Github release-x.x.x branch commits as releases to the inversion
 *     bintray repo which syncs with jcenter
 *           
 * We are using two different repos because at the time of writing, bintray 
 * did not accept snapshots and OJO is their specific solution to hosting snapshots.  
 * 
 * Both the bintray and artifactory plugins have had varing support for
 * different gradle versions and gradle multi project builds specifically.  
 * Most of the OJO examples around the web are for single projects what
 * works for bintray in mutli projects does not work exactly the same way for
 * artifactory.
 *
 * Repos:
 *  - Bintray  - https://dl.bintray.com/inversion/repo/io/inversion/
 *             - https://bintray.com/inversion/repo
 *
 *  - OJO Repo - https://oss.jfrog.org/artifactory/oss-snapshot-local/io/inversion/
 *             - https://oss.jfrog.org/artifactory/webapp/#/artifacts/browse/tree/General/oss-snapshot-local/io/inversion/
 * 
 *  - JCenter mirror - https://jcenter.bintray.com/io/inversion/
 *
 * Projects that want to pull both releases and snapshot dependencies should include the
 * following repos in their gradle config:
 *    
 *  repositories {
 *		jcenter()
 *		maven { url 'https://oss.jfrog.org/artifactory/oss-snapshot-local' }
 *   }
 *
 * The following examples/articles were super helpful in figuring all fo this out
 *   - https://github.com/jfrog/project-examples/blob/master/gradle-examples/gradle-example-multi-repos/build.gradle
 *   - https://github.com/bintray/bintray-examples/tree/master/gradle-multi-example
 *   - https://github.com/bintray/bintray-examples/tree/master/gradle-bintray-plugin-examples
 *   - https://reflectoring.io/guide-publishing-to-bintray-with-gradle/
 *   - https://reflectoring.io/bintray-jcenter-maven-central/
 *   - https://reflectoring.io/fully-automated-open-source-release-chain/
 *   - https://reflectoring.io/spring-boot-gradle-multi-module/
 *   - https://github.com/jfrog/build-info/issues/145
 *   - https://stackoverflow.com/questions/35851251/gradle-artifactory-plugin-how-to-publish-artifacts-from-multiple-modules-in-a
 *
 */

buildscript {
    repositories {
		jcenter()
		maven { url 'https://repo1.maven.org/maven2'}
    }

    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
        
        //WARNING artifactory plugin 4.13.0 was the lastest as of 1/8/20
        //but artifactoryPublish was hanging, never completing.  Downgrading
        //seemed to fix the problem
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.10.0"
        
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:2.2.+'
    }
    
//    configurations.classpath {
//        resolutionStrategy {
//            cacheDynamicVersionsFor 0, 'seconds'
//            cacheChangingModulesFor 0, 'seconds'
//        }
//    }
}

plugins {
  id "java-library"
  id "maven-publish"
}
apply plugin: 'nebula-aggregate-javadocs'

def bintrayUser = System.getProperty("bintray.user")
def bintrayKey = System.getProperty("bintray.key")
def buildNumber = System.getProperty("build.number")


/**
 * The gradle-aggregate-javadocs-plugin generates a combined
 * javadoc for all subprojects but as of this writing, the
 * plugin did not seem to offer the ability to change the output
 * directory.  Running 'allJavadocs' instead of 'aggregateJavadocs' 
 * will generate the combined docs and put them into /docs/javadoc
 * where they can be checked into github and served up from
 * github pages.
 */ 
task allJavadocs {
    dependsOn 'aggregateJavadocs'
    doLast {
    	ant.delete(dir: 'docs/javadoc/')
        ant.move(file: 'build/docs/javadoc/', tofile: 'docs/javadoc/')
    }
}

tasks.withType(Javadoc) { 
	failOnError false
	title = "Inversion Cloud API Engine - " + project.version
 }
	 
//regenerate javadocs after a build	
build.finalizedBy(allJavadocs)
	
allprojects {
	group = 'io.inversion'
	def isSnapshot = Boolean.valueOf(System.getProperty("snapshot"))
	project.version = project.version + (isSnapshot ? "-SNAPSHOT" : "")
	
	//required for generating comprehensive javadocs with
	//gradle-aggregate-javadocs-plugin and not failing on error
	
	tasks.withType(Javadoc) { 
		failOnError false
		options.bottom = "Copyright &#169; ${java.time.Year.now()} <a href=\"http://rocketpartners.io\">Rocket Partners, LLC</a>. All rights reserved."
	 }
	    
}

subprojects {
	
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
	apply plugin: 'com.jfrog.artifactory'
    
    sourceCompatibility = 1.8
	targetCompatibility = 1.8
	
	repositories {
		jcenter()
		mavenCentral()
		maven { url 'https://repo1.maven.org/maven2'}
		maven { url 'https://jitpack.io' }
	}

	dependencies {
		testCompile 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
	}
	
	task sourcesJar(type: Jar) {
	    from sourceSets.main.allJava
	    archiveClassifier = 'sources'
	}
	
	javadoc.failOnError = false
	task javadocJar(type: Jar) {
	    from javadoc
	    archiveClassifier = 'javadoc'
	}
	
	//keeps integration test that require access to external systems
	//from running as part of the standard CICD pipeline build
	//run intergration tests via:  ./gradlew test -Dtest.profile=integration 
	test {
		useJUnitPlatform()
  		if (System.properties['test.profile'] != 'integration') {
    		exclude '**/*IntegTest*'
  		}
		testLogging {
			outputs.upToDateWhen {false}
			showStandardStreams = true
		}
	}

	//causes a new ${subpoject}/pom.xml file to be generated after each build
	gradle.buildFinished { buildResult ->
  		tasks.generatePomFileForMavenJavaPublication.doGenerate()
	}
	project.getGradle().getTaskGraph().whenReady {
	    tasks.withType(GenerateMavenPom.class) {
	        destination = file("$buildDir/../pom.xml")
	    }
	}

	publishing {
	    publications {
	        mavenJava(MavenPublication) {
	            artifactId = project.name
	            from components.java
	            artifact sourcesJar
	            artifact javadocJar
	            
	            //-- the following will generate poms with resolved dependencies
	            //-- instead of potentially dynamic dependencies declared in the gradle build
	            //-- https://docs.gradle.org/current/userguide/publishing_maven.html
	            versionMapping {
	                usage('java-api') {
	                    fromResolutionOf('runtimeClasspath')
	                }
	                usage('java-runtime') {
	                    fromResolutionResult()
	                }
	            }

	            pom {
	                name = project.name
	                description = 'Inversion Cloud API Engine'
	                url = 'https://inversion.io'
	                licenses {
	                    license {
	                        name = 'The Apache License, Version 2.0'
	                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
	                    }
	                }
	                developers {
	                    developer {
	                        id = 'inversion'
	                        name = 'Rocket Partners'
	                        email = 'hello@rocketpartners.io'
	                    }
	                }
	                scm {
	                    connection = 'https://github.com/inversion-api/inversion-engine.git'
	                    developerConnection = 'https://github.com/inversion-api/inversion-engine.git'
	                    url = 'https://inversion.io'
	                }
	            }
	        }
	    }
	}

	bintray {
		user = bintrayUser
		key = bintrayKey
		publications = ['mavenJava']
	    publish = true
		pkg {
			repo = 'repo'
			name = project.name
			licenses = ['Apache-2.0']
			websiteUrl = 'http://inversion.io'
	        issueTrackerUrl = 'https://github.com/inversion-api/inversion-engine/issues'
	 		vcsUrl = 'https://github.com/inversion-api/inversion-engine.git'

	        licenses = ['Apache-2.0']
	        labels = ['rest', 'api', 'mysql', 'postgress', 'mssql', 'dynamodb', 'cosmosdb', 'elasticsearch', 'nosql']

			version {
				name = project.version
				released  = new Date()
			}
		}
	}

	artifactoryPublish {
        publications(publishing.publications.mavenJava)
    }
}




//artifactoryPublish.skip=true
//
//
//artifactory {
//    contextUrl = 'https://oss.jfrog.org'
//    publish {
//        repository {
//            repoKey = 'oss-snapshot-local'
//            username = bintrayUser
//            password = bintrayKey
//        }
//        defaults {
//            publications('mavenJava')
//            publishArtifacts = true
//            publishPom = true
//            properties = [
//                    'build.number': buildNumber,
//                    'build.name': project.name
//            ]
//        }
//    }
//    resolve {
//        repoKey = 'jcenter'
//    }
//    clientConfig.info.setBuildNumber(buildNumber)
//    clientConfig.info.setBuildName(project.name)
//}