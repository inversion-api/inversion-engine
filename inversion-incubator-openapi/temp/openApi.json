{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "northwind",
    "version" : "1"
  },
  "servers" : [ {
    "url" : "/northwind/v1/us"
  } ],
  "security" : [ ],
  "paths" : {
    "/categories" : {
      "get" : {
        "tags" : [ "Category" ],
        "description" : "A pageable list of all Category resources the user has access to and also match any query parameters.  The list may be empty.",
        "operationId" : "GET--categories",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "The optional value used to compute the 'offset' of the first resource returned as 'offset'='page'*'limit'.  If an 'offset' parameter is also supplied it will be used instead of the 'page' parameter.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "The optional number of resources to return.  Unless overridden by other configuration the default value is '100'",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "An optional comma separated list of json property names use to order the results.  Each property may optionally be prefixed with '-' to specify descending order.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "An RQL formatted filter statement that allows you to retrieve only the specific resources you require.  See 'Overview->Querying' for more documentation on available functions and syntax.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "An optional comma separated list of json properties to include in the response.  If this field is not supplied, then any field not listed in the 'excludes' parameter are returned.  When using the 'expands' parameter, you can use 'dot' path notation to reference inclusion of nested properties.",
          "style" : "pipeDelimited",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "exclude",
          "in" : "query",
          "description" : "An optional comma separated list of json properties you specifically do not want to be included in the response. When using the 'expands' parameter, you can use 'dot' path notation to reference exclusion of nested properties.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "An optional comma separated lists of relationship names that should be expanded in the response. You can reference any number of nesting using 'dot' path notation.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListCategoriesResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Category" ],
        "description" : "Creates a new Category resource.",
        "operationId" : "POST--categories",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "required" : [ "categoryId" ],
                  "type" : "object",
                  "properties" : {
                    "categoryId" : {
                      "type" : "number"
                    },
                    "categoryName" : {
                      "type" : "string"
                    },
                    "description" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "picture" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "products" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/CreateProductRequest"
                      }
                    }
                  }
                }, {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CreateCategoryRequest"
                  }
                } ]
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateCategoryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/customerDemographics" : {
      "get" : {
        "tags" : [ "Customer Demographic" ],
        "description" : "A pageable list of all CustomerDemographic resources the user has access to and also match any query parameters.  The list may be empty.",
        "operationId" : "GET--customerDemographics",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "The optional value used to compute the 'offset' of the first resource returned as 'offset'='page'*'limit'.  If an 'offset' parameter is also supplied it will be used instead of the 'page' parameter.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "The optional number of resources to return.  Unless overridden by other configuration the default value is '100'",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "An optional comma separated list of json property names use to order the results.  Each property may optionally be prefixed with '-' to specify descending order.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "An RQL formatted filter statement that allows you to retrieve only the specific resources you require.  See 'Overview->Querying' for more documentation on available functions and syntax.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "An optional comma separated list of json properties to include in the response.  If this field is not supplied, then any field not listed in the 'excludes' parameter are returned.  When using the 'expands' parameter, you can use 'dot' path notation to reference inclusion of nested properties.",
          "style" : "pipeDelimited",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "exclude",
          "in" : "query",
          "description" : "An optional comma separated list of json properties you specifically do not want to be included in the response. When using the 'expands' parameter, you can use 'dot' path notation to reference exclusion of nested properties.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "An optional comma separated lists of relationship names that should be expanded in the response. You can reference any number of nesting using 'dot' path notation.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListCustomerDemographicsResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Customer Demographic" ],
        "description" : "Creates a new CustomerDemographic resource.",
        "operationId" : "POST--customerDemographics",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "required" : [ "customerTypeId" ],
                  "type" : "object",
                  "properties" : {
                    "customerTypeId" : {
                      "type" : "string"
                    },
                    "customerDesc" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "customers" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/CreateCustomerRequest"
                      }
                    }
                  }
                }, {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CreateCustomerDemographicRequest"
                  }
                } ]
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateCustomerDemographicResponse"
                }
              }
            }
          }
        }
      }
    },
    "/customers" : {
      "get" : {
        "tags" : [ "Customer" ],
        "description" : "A pageable list of all Customer resources the user has access to and also match any query parameters.  The list may be empty.",
        "operationId" : "GET--customers",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "The optional value used to compute the 'offset' of the first resource returned as 'offset'='page'*'limit'.  If an 'offset' parameter is also supplied it will be used instead of the 'page' parameter.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "The optional number of resources to return.  Unless overridden by other configuration the default value is '100'",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "An optional comma separated list of json property names use to order the results.  Each property may optionally be prefixed with '-' to specify descending order.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "An RQL formatted filter statement that allows you to retrieve only the specific resources you require.  See 'Overview->Querying' for more documentation on available functions and syntax.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "An optional comma separated list of json properties to include in the response.  If this field is not supplied, then any field not listed in the 'excludes' parameter are returned.  When using the 'expands' parameter, you can use 'dot' path notation to reference inclusion of nested properties.",
          "style" : "pipeDelimited",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "exclude",
          "in" : "query",
          "description" : "An optional comma separated list of json properties you specifically do not want to be included in the response. When using the 'expands' parameter, you can use 'dot' path notation to reference exclusion of nested properties.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "An optional comma separated lists of relationship names that should be expanded in the response. You can reference any number of nesting using 'dot' path notation.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListCustomersResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Customer" ],
        "description" : "Creates a new Customer resource.",
        "operationId" : "POST--customers",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "required" : [ "customerId" ],
                  "type" : "object",
                  "properties" : {
                    "customerId" : {
                      "type" : "string"
                    },
                    "companyName" : {
                      "type" : "string"
                    },
                    "contactName" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "contactTitle" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "address" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "city" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "region" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "postalCode" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "country" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "phone" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "fax" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "customerDemographics" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/CreateCustomerDemographicRequest"
                      }
                    },
                    "orders" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/CreateOrderRequest"
                      }
                    }
                  }
                }, {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CreateCustomerRequest"
                  }
                } ]
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateCustomerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employees" : {
      "get" : {
        "tags" : [ "Employee" ],
        "description" : "A pageable list of all Employee resources the user has access to and also match any query parameters.  The list may be empty.",
        "operationId" : "GET--employees",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "The optional value used to compute the 'offset' of the first resource returned as 'offset'='page'*'limit'.  If an 'offset' parameter is also supplied it will be used instead of the 'page' parameter.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "The optional number of resources to return.  Unless overridden by other configuration the default value is '100'",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "An optional comma separated list of json property names use to order the results.  Each property may optionally be prefixed with '-' to specify descending order.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "An RQL formatted filter statement that allows you to retrieve only the specific resources you require.  See 'Overview->Querying' for more documentation on available functions and syntax.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "An optional comma separated list of json properties to include in the response.  If this field is not supplied, then any field not listed in the 'excludes' parameter are returned.  When using the 'expands' parameter, you can use 'dot' path notation to reference inclusion of nested properties.",
          "style" : "pipeDelimited",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "exclude",
          "in" : "query",
          "description" : "An optional comma separated list of json properties you specifically do not want to be included in the response. When using the 'expands' parameter, you can use 'dot' path notation to reference exclusion of nested properties.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "An optional comma separated lists of relationship names that should be expanded in the response. You can reference any number of nesting using 'dot' path notation.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListEmployeesResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Employee" ],
        "description" : "Creates a new Employee resource.",
        "operationId" : "POST--employees",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "required" : [ "employeeId" ],
                  "type" : "object",
                  "properties" : {
                    "employeeId" : {
                      "type" : "number"
                    },
                    "lastName" : {
                      "type" : "string"
                    },
                    "firstName" : {
                      "type" : "string"
                    },
                    "title" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "titleOfCourtesy" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "birthDate" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "hireDate" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "address" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "city" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "region" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "postalCode" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "country" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "homePhone" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "extension" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "notes" : {
                      "type" : "string"
                    },
                    "reportsToEmployeeId" : {
                      "type" : "number",
                      "nullable" : true
                    },
                    "photoPath" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "salary" : {
                      "type" : "number",
                      "nullable" : true
                    },
                    "orderDetails" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/CreateOrderDetailRequest"
                      }
                    },
                    "territories" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/CreateTerritoryRequest"
                      }
                    },
                    "employees" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/CreateEmployeeRequest"
                      }
                    },
                    "reportsTo" : {
                      "$ref" : "#/components/schemas/CreateEmployeeRequest"
                    },
                    "orders" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/CreateOrderRequest"
                      }
                    }
                  }
                }, {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CreateEmployeeRequest"
                  }
                } ]
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateEmployeeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/indexLogs" : {
      "get" : {
        "tags" : [ "Index Log" ],
        "description" : "A pageable list of all IndexLog resources the user has access to and also match any query parameters.  The list may be empty.",
        "operationId" : "GET--indexLogs",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "The optional value used to compute the 'offset' of the first resource returned as 'offset'='page'*'limit'.  If an 'offset' parameter is also supplied it will be used instead of the 'page' parameter.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "The optional number of resources to return.  Unless overridden by other configuration the default value is '100'",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "An optional comma separated list of json property names use to order the results.  Each property may optionally be prefixed with '-' to specify descending order.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "An RQL formatted filter statement that allows you to retrieve only the specific resources you require.  See 'Overview->Querying' for more documentation on available functions and syntax.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "An optional comma separated list of json properties to include in the response.  If this field is not supplied, then any field not listed in the 'excludes' parameter are returned.  When using the 'expands' parameter, you can use 'dot' path notation to reference inclusion of nested properties.",
          "style" : "pipeDelimited",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "exclude",
          "in" : "query",
          "description" : "An optional comma separated list of json properties you specifically do not want to be included in the response. When using the 'expands' parameter, you can use 'dot' path notation to reference exclusion of nested properties.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "An optional comma separated lists of relationship names that should be expanded in the response. You can reference any number of nesting using 'dot' path notation.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListIndexLogsResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Index Log" ],
        "description" : "Creates a new IndexLog resource.",
        "operationId" : "POST--indexLogs",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "required" : [ "id" ],
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "type" : "number"
                    },
                    "tenantCode" : {
                      "type" : "string"
                    },
                    "entityId" : {
                      "type" : "number",
                      "nullable" : true
                    },
                    "entityType" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "error" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "noIndex" : {
                      "type" : "number",
                      "nullable" : true
                    },
                    "modifiedAt" : {
                      "type" : "string",
                      "nullable" : true
                    }
                  }
                }, {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CreateIndexLogRequest"
                  }
                } ]
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateIndexLogResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orderDetails" : {
      "get" : {
        "tags" : [ "Order Detail" ],
        "description" : "A pageable list of all OrderDetail resources the user has access to and also match any query parameters.  The list may be empty.",
        "operationId" : "GET--orderDetails",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "The optional value used to compute the 'offset' of the first resource returned as 'offset'='page'*'limit'.  If an 'offset' parameter is also supplied it will be used instead of the 'page' parameter.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "The optional number of resources to return.  Unless overridden by other configuration the default value is '100'",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "An optional comma separated list of json property names use to order the results.  Each property may optionally be prefixed with '-' to specify descending order.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "An RQL formatted filter statement that allows you to retrieve only the specific resources you require.  See 'Overview->Querying' for more documentation on available functions and syntax.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "An optional comma separated list of json properties to include in the response.  If this field is not supplied, then any field not listed in the 'excludes' parameter are returned.  When using the 'expands' parameter, you can use 'dot' path notation to reference inclusion of nested properties.",
          "style" : "pipeDelimited",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "exclude",
          "in" : "query",
          "description" : "An optional comma separated list of json properties you specifically do not want to be included in the response. When using the 'expands' parameter, you can use 'dot' path notation to reference exclusion of nested properties.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "An optional comma separated lists of relationship names that should be expanded in the response. You can reference any number of nesting using 'dot' path notation.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListOrderDetailsResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Order Detail" ],
        "description" : "Creates a new OrderDetail resource.",
        "operationId" : "POST--orderDetails",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "required" : [ "orderId", "productId" ],
                  "type" : "object",
                  "properties" : {
                    "orderId" : {
                      "type" : "number"
                    },
                    "productId" : {
                      "type" : "number"
                    },
                    "unitPrice" : {
                      "type" : "number"
                    },
                    "quantity" : {
                      "type" : "number"
                    },
                    "discount" : {
                      "type" : "number"
                    },
                    "employees" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/CreateEmployeeRequest"
                      }
                    },
                    "order" : {
                      "$ref" : "#/components/schemas/CreateOrderRequest"
                    },
                    "product" : {
                      "$ref" : "#/components/schemas/CreateProductRequest"
                    }
                  }
                }, {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CreateOrderDetailRequest"
                  }
                } ]
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateOrderDetailResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orders" : {
      "get" : {
        "tags" : [ "Order" ],
        "description" : "A pageable list of all Order resources the user has access to and also match any query parameters.  The list may be empty.",
        "operationId" : "GET--orders",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "The optional value used to compute the 'offset' of the first resource returned as 'offset'='page'*'limit'.  If an 'offset' parameter is also supplied it will be used instead of the 'page' parameter.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "The optional number of resources to return.  Unless overridden by other configuration the default value is '100'",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "An optional comma separated list of json property names use to order the results.  Each property may optionally be prefixed with '-' to specify descending order.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "An RQL formatted filter statement that allows you to retrieve only the specific resources you require.  See 'Overview->Querying' for more documentation on available functions and syntax.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "An optional comma separated list of json properties to include in the response.  If this field is not supplied, then any field not listed in the 'excludes' parameter are returned.  When using the 'expands' parameter, you can use 'dot' path notation to reference inclusion of nested properties.",
          "style" : "pipeDelimited",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "exclude",
          "in" : "query",
          "description" : "An optional comma separated list of json properties you specifically do not want to be included in the response. When using the 'expands' parameter, you can use 'dot' path notation to reference exclusion of nested properties.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "An optional comma separated lists of relationship names that should be expanded in the response. You can reference any number of nesting using 'dot' path notation.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListOrdersResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Order" ],
        "description" : "Creates a new Order resource.",
        "operationId" : "POST--orders",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "required" : [ "orderId" ],
                  "type" : "object",
                  "properties" : {
                    "orderId" : {
                      "type" : "number"
                    },
                    "customerId" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "employeeId" : {
                      "type" : "number",
                      "nullable" : true
                    },
                    "orderDate" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "requiredDate" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "shippedDate" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "shipViaShipperId" : {
                      "type" : "number",
                      "nullable" : true
                    },
                    "freight" : {
                      "type" : "number",
                      "nullable" : true
                    },
                    "shipName" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "shipAddress" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "shipCity" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "shipRegion" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "shipPostalCode" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "shipCountry" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "orderDetails" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/CreateOrderDetailRequest"
                      }
                    },
                    "customer" : {
                      "$ref" : "#/components/schemas/CreateCustomerRequest"
                    },
                    "employee" : {
                      "$ref" : "#/components/schemas/CreateEmployeeRequest"
                    },
                    "shipVia" : {
                      "$ref" : "#/components/schemas/CreateShipperRequest"
                    }
                  }
                }, {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CreateOrderRequest"
                  }
                } ]
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateOrderResponse"
                }
              }
            }
          }
        }
      }
    },
    "/products" : {
      "get" : {
        "tags" : [ "Product" ],
        "description" : "A pageable list of all Product resources the user has access to and also match any query parameters.  The list may be empty.",
        "operationId" : "GET--products",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "The optional value used to compute the 'offset' of the first resource returned as 'offset'='page'*'limit'.  If an 'offset' parameter is also supplied it will be used instead of the 'page' parameter.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "The optional number of resources to return.  Unless overridden by other configuration the default value is '100'",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "An optional comma separated list of json property names use to order the results.  Each property may optionally be prefixed with '-' to specify descending order.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "An RQL formatted filter statement that allows you to retrieve only the specific resources you require.  See 'Overview->Querying' for more documentation on available functions and syntax.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "An optional comma separated list of json properties to include in the response.  If this field is not supplied, then any field not listed in the 'excludes' parameter are returned.  When using the 'expands' parameter, you can use 'dot' path notation to reference inclusion of nested properties.",
          "style" : "pipeDelimited",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "exclude",
          "in" : "query",
          "description" : "An optional comma separated list of json properties you specifically do not want to be included in the response. When using the 'expands' parameter, you can use 'dot' path notation to reference exclusion of nested properties.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "An optional comma separated lists of relationship names that should be expanded in the response. You can reference any number of nesting using 'dot' path notation.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListProductsResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Product" ],
        "description" : "Creates a new Product resource.",
        "operationId" : "POST--products",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "required" : [ "productId" ],
                  "type" : "object",
                  "properties" : {
                    "productId" : {
                      "type" : "number"
                    },
                    "productName" : {
                      "type" : "string"
                    },
                    "supplierId" : {
                      "type" : "number",
                      "nullable" : true
                    },
                    "categoryId" : {
                      "type" : "number",
                      "nullable" : true
                    },
                    "quantityPerUnit" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "unitPrice" : {
                      "type" : "number",
                      "nullable" : true
                    },
                    "unitsInStock" : {
                      "type" : "number",
                      "nullable" : true
                    },
                    "unitsOnOrder" : {
                      "type" : "number",
                      "nullable" : true
                    },
                    "reorderLevel" : {
                      "type" : "number",
                      "nullable" : true
                    },
                    "discontinued" : {
                      "type" : "boolean"
                    },
                    "orderDetails" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/CreateOrderDetailRequest"
                      }
                    },
                    "category" : {
                      "$ref" : "#/components/schemas/CreateCategoryRequest"
                    },
                    "supplier" : {
                      "$ref" : "#/components/schemas/CreateSupplierRequest"
                    }
                  }
                }, {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CreateProductRequest"
                  }
                } ]
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateProductResponse"
                }
              }
            }
          }
        }
      }
    },
    "/regions" : {
      "get" : {
        "tags" : [ "Region" ],
        "description" : "A pageable list of all Region resources the user has access to and also match any query parameters.  The list may be empty.",
        "operationId" : "GET--regions",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "The optional value used to compute the 'offset' of the first resource returned as 'offset'='page'*'limit'.  If an 'offset' parameter is also supplied it will be used instead of the 'page' parameter.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "The optional number of resources to return.  Unless overridden by other configuration the default value is '100'",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "An optional comma separated list of json property names use to order the results.  Each property may optionally be prefixed with '-' to specify descending order.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "An RQL formatted filter statement that allows you to retrieve only the specific resources you require.  See 'Overview->Querying' for more documentation on available functions and syntax.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "An optional comma separated list of json properties to include in the response.  If this field is not supplied, then any field not listed in the 'excludes' parameter are returned.  When using the 'expands' parameter, you can use 'dot' path notation to reference inclusion of nested properties.",
          "style" : "pipeDelimited",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "exclude",
          "in" : "query",
          "description" : "An optional comma separated list of json properties you specifically do not want to be included in the response. When using the 'expands' parameter, you can use 'dot' path notation to reference exclusion of nested properties.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "An optional comma separated lists of relationship names that should be expanded in the response. You can reference any number of nesting using 'dot' path notation.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListRegionsResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Region" ],
        "description" : "Creates a new Region resource.",
        "operationId" : "POST--regions",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "required" : [ "regionId" ],
                  "type" : "object",
                  "properties" : {
                    "regionId" : {
                      "type" : "number"
                    },
                    "regionDescription" : {
                      "type" : "string"
                    },
                    "territories" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/CreateTerritoryRequest"
                      }
                    }
                  }
                }, {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CreateRegionRequest"
                  }
                } ]
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateRegionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/shippers" : {
      "get" : {
        "tags" : [ "Shipper" ],
        "description" : "A pageable list of all Shipper resources the user has access to and also match any query parameters.  The list may be empty.",
        "operationId" : "GET--shippers",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "The optional value used to compute the 'offset' of the first resource returned as 'offset'='page'*'limit'.  If an 'offset' parameter is also supplied it will be used instead of the 'page' parameter.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "The optional number of resources to return.  Unless overridden by other configuration the default value is '100'",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "An optional comma separated list of json property names use to order the results.  Each property may optionally be prefixed with '-' to specify descending order.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "An RQL formatted filter statement that allows you to retrieve only the specific resources you require.  See 'Overview->Querying' for more documentation on available functions and syntax.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "An optional comma separated list of json properties to include in the response.  If this field is not supplied, then any field not listed in the 'excludes' parameter are returned.  When using the 'expands' parameter, you can use 'dot' path notation to reference inclusion of nested properties.",
          "style" : "pipeDelimited",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "exclude",
          "in" : "query",
          "description" : "An optional comma separated list of json properties you specifically do not want to be included in the response. When using the 'expands' parameter, you can use 'dot' path notation to reference exclusion of nested properties.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "An optional comma separated lists of relationship names that should be expanded in the response. You can reference any number of nesting using 'dot' path notation.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListShippersResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Shipper" ],
        "description" : "Creates a new Shipper resource.",
        "operationId" : "POST--shippers",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "required" : [ "shipperId" ],
                  "type" : "object",
                  "properties" : {
                    "shipperId" : {
                      "type" : "number"
                    },
                    "companyName" : {
                      "type" : "string"
                    },
                    "phone" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "orders" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/CreateOrderRequest"
                      }
                    }
                  }
                }, {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CreateShipperRequest"
                  }
                } ]
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateShipperResponse"
                }
              }
            }
          }
        }
      }
    },
    "/suppliers" : {
      "get" : {
        "tags" : [ "Supplier" ],
        "description" : "A pageable list of all Supplier resources the user has access to and also match any query parameters.  The list may be empty.",
        "operationId" : "GET--suppliers",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "The optional value used to compute the 'offset' of the first resource returned as 'offset'='page'*'limit'.  If an 'offset' parameter is also supplied it will be used instead of the 'page' parameter.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "The optional number of resources to return.  Unless overridden by other configuration the default value is '100'",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "An optional comma separated list of json property names use to order the results.  Each property may optionally be prefixed with '-' to specify descending order.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "An RQL formatted filter statement that allows you to retrieve only the specific resources you require.  See 'Overview->Querying' for more documentation on available functions and syntax.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "An optional comma separated list of json properties to include in the response.  If this field is not supplied, then any field not listed in the 'excludes' parameter are returned.  When using the 'expands' parameter, you can use 'dot' path notation to reference inclusion of nested properties.",
          "style" : "pipeDelimited",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "exclude",
          "in" : "query",
          "description" : "An optional comma separated list of json properties you specifically do not want to be included in the response. When using the 'expands' parameter, you can use 'dot' path notation to reference exclusion of nested properties.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "An optional comma separated lists of relationship names that should be expanded in the response. You can reference any number of nesting using 'dot' path notation.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListSuppliersResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Supplier" ],
        "description" : "Creates a new Supplier resource.",
        "operationId" : "POST--suppliers",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "required" : [ "supplierId" ],
                  "type" : "object",
                  "properties" : {
                    "supplierId" : {
                      "type" : "number"
                    },
                    "companyName" : {
                      "type" : "string"
                    },
                    "contactName" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "contactTitle" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "address" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "city" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "region" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "postalCode" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "country" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "phone" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "fax" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "homePage" : {
                      "type" : "string",
                      "nullable" : true
                    },
                    "products" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/CreateProductRequest"
                      }
                    }
                  }
                }, {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CreateSupplierRequest"
                  }
                } ]
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateSupplierResponse"
                }
              }
            }
          }
        }
      }
    },
    "/territories" : {
      "get" : {
        "tags" : [ "Territory" ],
        "description" : "A pageable list of all Territory resources the user has access to and also match any query parameters.  The list may be empty.",
        "operationId" : "GET--territories",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "The optional value used to compute the 'offset' of the first resource returned as 'offset'='page'*'limit'.  If an 'offset' parameter is also supplied it will be used instead of the 'page' parameter.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "The optional number of resources to return.  Unless overridden by other configuration the default value is '100'",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "An optional comma separated list of json property names use to order the results.  Each property may optionally be prefixed with '-' to specify descending order.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "An RQL formatted filter statement that allows you to retrieve only the specific resources you require.  See 'Overview->Querying' for more documentation on available functions and syntax.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "An optional comma separated list of json properties to include in the response.  If this field is not supplied, then any field not listed in the 'excludes' parameter are returned.  When using the 'expands' parameter, you can use 'dot' path notation to reference inclusion of nested properties.",
          "style" : "pipeDelimited",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "exclude",
          "in" : "query",
          "description" : "An optional comma separated list of json properties you specifically do not want to be included in the response. When using the 'expands' parameter, you can use 'dot' path notation to reference exclusion of nested properties.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "An optional comma separated lists of relationship names that should be expanded in the response. You can reference any number of nesting using 'dot' path notation.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListTerritoriesResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Territory" ],
        "description" : "Creates a new Territory resource.",
        "operationId" : "POST--territories",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "required" : [ "territoryId" ],
                  "type" : "object",
                  "properties" : {
                    "territoryId" : {
                      "type" : "string"
                    },
                    "territoryDescription" : {
                      "type" : "string"
                    },
                    "regionId" : {
                      "type" : "number",
                      "nullable" : true
                    },
                    "employees" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/CreateEmployeeRequest"
                      }
                    },
                    "region" : {
                      "$ref" : "#/components/schemas/CreateRegionRequest"
                    }
                  }
                }, {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CreateTerritoryRequest"
                  }
                } ]
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateTerritoryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/urls" : {
      "get" : {
        "tags" : [ "Url" ],
        "description" : "A pageable list of all Url resources the user has access to and also match any query parameters.  The list may be empty.",
        "operationId" : "GET--urls",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "The optional value used to compute the 'offset' of the first resource returned as 'offset'='page'*'limit'.  If an 'offset' parameter is also supplied it will be used instead of the 'page' parameter.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "The optional number of resources to return.  Unless overridden by other configuration the default value is '100'",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "An optional comma separated list of json property names use to order the results.  Each property may optionally be prefixed with '-' to specify descending order.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "An RQL formatted filter statement that allows you to retrieve only the specific resources you require.  See 'Overview->Querying' for more documentation on available functions and syntax.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "An optional comma separated list of json properties to include in the response.  If this field is not supplied, then any field not listed in the 'excludes' parameter are returned.  When using the 'expands' parameter, you can use 'dot' path notation to reference inclusion of nested properties.",
          "style" : "pipeDelimited",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "exclude",
          "in" : "query",
          "description" : "An optional comma separated list of json properties you specifically do not want to be included in the response. When using the 'expands' parameter, you can use 'dot' path notation to reference exclusion of nested properties.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "An optional comma separated lists of relationship names that should be expanded in the response. You can reference any number of nesting using 'dot' path notation.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListUrlsResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Url" ],
        "description" : "Creates a new Url resource.",
        "operationId" : "POST--urls",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "required" : [ "short", "url" ],
                  "type" : "object",
                  "properties" : {
                    "url" : {
                      "type" : "string"
                    },
                    "short" : {
                      "type" : "string"
                    },
                    "text" : {
                      "type" : "string"
                    }
                  }
                }, {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CreateUrlRequest"
                  }
                } ]
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateUrlResponse"
                }
              }
            }
          }
        }
      }
    },
    "/categories/{categoryId}" : {
      "get" : {
        "tags" : [ "Category" ],
        "description" : "A specific Category object",
        "operationId" : "GET--categories-categoryId",
        "parameters" : [ {
          "name" : "include",
          "in" : "query",
          "description" : "An optional comma separated list of json properties to include in the response.  If this field is not supplied, then any field not listed in the 'excludes' parameter are returned.  When using the 'expands' parameter, you can use 'dot' path notation to reference inclusion of nested properties.",
          "style" : "pipeDelimited",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "exclude",
          "in" : "query",
          "description" : "An optional comma separated list of json properties you specifically do not want to be included in the response. When using the 'expands' parameter, you can use 'dot' path notation to reference exclusion of nested properties.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "An optional comma separated lists of relationship names that should be expanded in the response. You can reference any number of nesting using 'dot' path notation.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCategoryResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Category" ],
        "description" : "Updates an existing Category resource.  Properties of the existing resource that are not supplied in the request body will not be updated.",
        "operationId" : "PUT--categories-categoryId",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateCategoryRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateCategoryResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Category" ],
        "description" : "Deletes an existing Category resource.",
        "operationId" : "DELETE--categories-categoryId",
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "categoryId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "number"
        }
      } ]
    },
    "/customerDemographics/:customerTypeId" : {
      "get" : {
        "tags" : [ "Customer Demographic" ],
        "description" : "A specific CustomerDemographic object",
        "operationId" : "GET--customerDemographics-:customerTypeId",
        "parameters" : [ {
          "name" : "include",
          "in" : "query",
          "description" : "An optional comma separated list of json properties to include in the response.  If this field is not supplied, then any field not listed in the 'excludes' parameter are returned.  When using the 'expands' parameter, you can use 'dot' path notation to reference inclusion of nested properties.",
          "style" : "pipeDelimited",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "exclude",
          "in" : "query",
          "description" : "An optional comma separated list of json properties you specifically do not want to be included in the response. When using the 'expands' parameter, you can use 'dot' path notation to reference exclusion of nested properties.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "An optional comma separated lists of relationship names that should be expanded in the response. You can reference any number of nesting using 'dot' path notation.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomerDemographicResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Customer Demographic" ],
        "description" : "Updates an existing CustomerDemographic resource.  Properties of the existing resource that are not supplied in the request body will not be updated.",
        "operationId" : "PUT--customerDemographics-:customerTypeId",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateCustomerDemographicRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateCustomerDemographicResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Customer Demographic" ],
        "description" : "Deletes an existing CustomerDemographic resource.",
        "operationId" : "DELETE--customerDemographics-:customerTypeId",
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "customerTypeId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/customers/:customerId" : {
      "get" : {
        "tags" : [ "Customer" ],
        "description" : "A specific Customer object",
        "operationId" : "GET--customers-:customerId",
        "parameters" : [ {
          "name" : "include",
          "in" : "query",
          "description" : "An optional comma separated list of json properties to include in the response.  If this field is not supplied, then any field not listed in the 'excludes' parameter are returned.  When using the 'expands' parameter, you can use 'dot' path notation to reference inclusion of nested properties.",
          "style" : "pipeDelimited",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "exclude",
          "in" : "query",
          "description" : "An optional comma separated list of json properties you specifically do not want to be included in the response. When using the 'expands' parameter, you can use 'dot' path notation to reference exclusion of nested properties.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "An optional comma separated lists of relationship names that should be expanded in the response. You can reference any number of nesting using 'dot' path notation.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomerResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Customer" ],
        "description" : "Updates an existing Customer resource.  Properties of the existing resource that are not supplied in the request body will not be updated.",
        "operationId" : "PUT--customers-:customerId",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateCustomerRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateCustomerResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Customer" ],
        "description" : "Deletes an existing Customer resource.",
        "operationId" : "DELETE--customers-:customerId",
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/employees/{employeeId}" : {
      "get" : {
        "tags" : [ "Employee" ],
        "description" : "A specific Employee object",
        "operationId" : "GET--employees-employeeId",
        "parameters" : [ {
          "name" : "include",
          "in" : "query",
          "description" : "An optional comma separated list of json properties to include in the response.  If this field is not supplied, then any field not listed in the 'excludes' parameter are returned.  When using the 'expands' parameter, you can use 'dot' path notation to reference inclusion of nested properties.",
          "style" : "pipeDelimited",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "exclude",
          "in" : "query",
          "description" : "An optional comma separated list of json properties you specifically do not want to be included in the response. When using the 'expands' parameter, you can use 'dot' path notation to reference exclusion of nested properties.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "An optional comma separated lists of relationship names that should be expanded in the response. You can reference any number of nesting using 'dot' path notation.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetEmployeeResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Employee" ],
        "description" : "Updates an existing Employee resource.  Properties of the existing resource that are not supplied in the request body will not be updated.",
        "operationId" : "PUT--employees-employeeId",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateEmployeeRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateEmployeeResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Employee" ],
        "description" : "Deletes an existing Employee resource.",
        "operationId" : "DELETE--employees-employeeId",
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "employeeId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "number"
        }
      } ]
    },
    "/indexLogs/{id}" : {
      "get" : {
        "tags" : [ "Index Log" ],
        "description" : "A specific IndexLog object",
        "operationId" : "GET--indexLogs-id",
        "parameters" : [ {
          "name" : "include",
          "in" : "query",
          "description" : "An optional comma separated list of json properties to include in the response.  If this field is not supplied, then any field not listed in the 'excludes' parameter are returned.  When using the 'expands' parameter, you can use 'dot' path notation to reference inclusion of nested properties.",
          "style" : "pipeDelimited",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "exclude",
          "in" : "query",
          "description" : "An optional comma separated list of json properties you specifically do not want to be included in the response. When using the 'expands' parameter, you can use 'dot' path notation to reference exclusion of nested properties.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "An optional comma separated lists of relationship names that should be expanded in the response. You can reference any number of nesting using 'dot' path notation.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetIndexLogResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Index Log" ],
        "description" : "Updates an existing IndexLog resource.  Properties of the existing resource that are not supplied in the request body will not be updated.",
        "operationId" : "PUT--indexLogs-id",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateIndexLogRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateIndexLogResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Index Log" ],
        "description" : "Deletes an existing IndexLog resource.",
        "operationId" : "DELETE--indexLogs-id",
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "number"
        }
      } ]
    },
    "/orderDetails/:id" : {
      "get" : {
        "tags" : [ "Order Detail" ],
        "description" : "A specific OrderDetail object",
        "operationId" : "GET--orderDetails-:id",
        "parameters" : [ {
          "name" : "include",
          "in" : "query",
          "description" : "An optional comma separated list of json properties to include in the response.  If this field is not supplied, then any field not listed in the 'excludes' parameter are returned.  When using the 'expands' parameter, you can use 'dot' path notation to reference inclusion of nested properties.",
          "style" : "pipeDelimited",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "exclude",
          "in" : "query",
          "description" : "An optional comma separated list of json properties you specifically do not want to be included in the response. When using the 'expands' parameter, you can use 'dot' path notation to reference exclusion of nested properties.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "An optional comma separated lists of relationship names that should be expanded in the response. You can reference any number of nesting using 'dot' path notation.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOrderDetailResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Order Detail" ],
        "description" : "Updates an existing OrderDetail resource.  Properties of the existing resource that are not supplied in the request body will not be updated.",
        "operationId" : "PUT--orderDetails-:id",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateOrderDetailRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateOrderDetailResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Order Detail" ],
        "description" : "Deletes an existing OrderDetail resource.",
        "operationId" : "DELETE--orderDetails-:id",
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/orders/{orderId}" : {
      "get" : {
        "tags" : [ "Order" ],
        "description" : "A specific Order object",
        "operationId" : "GET--orders-orderId",
        "parameters" : [ {
          "name" : "include",
          "in" : "query",
          "description" : "An optional comma separated list of json properties to include in the response.  If this field is not supplied, then any field not listed in the 'excludes' parameter are returned.  When using the 'expands' parameter, you can use 'dot' path notation to reference inclusion of nested properties.",
          "style" : "pipeDelimited",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "exclude",
          "in" : "query",
          "description" : "An optional comma separated list of json properties you specifically do not want to be included in the response. When using the 'expands' parameter, you can use 'dot' path notation to reference exclusion of nested properties.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "An optional comma separated lists of relationship names that should be expanded in the response. You can reference any number of nesting using 'dot' path notation.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOrderResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Order" ],
        "description" : "Updates an existing Order resource.  Properties of the existing resource that are not supplied in the request body will not be updated.",
        "operationId" : "PUT--orders-orderId",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateOrderRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateOrderResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Order" ],
        "description" : "Deletes an existing Order resource.",
        "operationId" : "DELETE--orders-orderId",
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "orderId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "number"
        }
      } ]
    },
    "/products/{productId}" : {
      "get" : {
        "tags" : [ "Product" ],
        "description" : "A specific Product object",
        "operationId" : "GET--products-productId",
        "parameters" : [ {
          "name" : "include",
          "in" : "query",
          "description" : "An optional comma separated list of json properties to include in the response.  If this field is not supplied, then any field not listed in the 'excludes' parameter are returned.  When using the 'expands' parameter, you can use 'dot' path notation to reference inclusion of nested properties.",
          "style" : "pipeDelimited",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "exclude",
          "in" : "query",
          "description" : "An optional comma separated list of json properties you specifically do not want to be included in the response. When using the 'expands' parameter, you can use 'dot' path notation to reference exclusion of nested properties.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "An optional comma separated lists of relationship names that should be expanded in the response. You can reference any number of nesting using 'dot' path notation.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Product" ],
        "description" : "Updates an existing Product resource.  Properties of the existing resource that are not supplied in the request body will not be updated.",
        "operationId" : "PUT--products-productId",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateProductRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateProductResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Product" ],
        "description" : "Deletes an existing Product resource.",
        "operationId" : "DELETE--products-productId",
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "productId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "number"
        }
      } ]
    },
    "/regions/{regionId}" : {
      "get" : {
        "tags" : [ "Region" ],
        "description" : "A specific Region object",
        "operationId" : "GET--regions-regionId",
        "parameters" : [ {
          "name" : "include",
          "in" : "query",
          "description" : "An optional comma separated list of json properties to include in the response.  If this field is not supplied, then any field not listed in the 'excludes' parameter are returned.  When using the 'expands' parameter, you can use 'dot' path notation to reference inclusion of nested properties.",
          "style" : "pipeDelimited",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "exclude",
          "in" : "query",
          "description" : "An optional comma separated list of json properties you specifically do not want to be included in the response. When using the 'expands' parameter, you can use 'dot' path notation to reference exclusion of nested properties.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "An optional comma separated lists of relationship names that should be expanded in the response. You can reference any number of nesting using 'dot' path notation.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetRegionResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Region" ],
        "description" : "Updates an existing Region resource.  Properties of the existing resource that are not supplied in the request body will not be updated.",
        "operationId" : "PUT--regions-regionId",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateRegionRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateRegionResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Region" ],
        "description" : "Deletes an existing Region resource.",
        "operationId" : "DELETE--regions-regionId",
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "regionId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "number"
        }
      } ]
    },
    "/shippers/{shipperId}" : {
      "get" : {
        "tags" : [ "Shipper" ],
        "description" : "A specific Shipper object",
        "operationId" : "GET--shippers-shipperId",
        "parameters" : [ {
          "name" : "include",
          "in" : "query",
          "description" : "An optional comma separated list of json properties to include in the response.  If this field is not supplied, then any field not listed in the 'excludes' parameter are returned.  When using the 'expands' parameter, you can use 'dot' path notation to reference inclusion of nested properties.",
          "style" : "pipeDelimited",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "exclude",
          "in" : "query",
          "description" : "An optional comma separated list of json properties you specifically do not want to be included in the response. When using the 'expands' parameter, you can use 'dot' path notation to reference exclusion of nested properties.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "An optional comma separated lists of relationship names that should be expanded in the response. You can reference any number of nesting using 'dot' path notation.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetShipperResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Shipper" ],
        "description" : "Updates an existing Shipper resource.  Properties of the existing resource that are not supplied in the request body will not be updated.",
        "operationId" : "PUT--shippers-shipperId",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateShipperRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateShipperResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Shipper" ],
        "description" : "Deletes an existing Shipper resource.",
        "operationId" : "DELETE--shippers-shipperId",
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "shipperId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "number"
        }
      } ]
    },
    "/suppliers/{supplierId}" : {
      "get" : {
        "tags" : [ "Supplier" ],
        "description" : "A specific Supplier object",
        "operationId" : "GET--suppliers-supplierId",
        "parameters" : [ {
          "name" : "include",
          "in" : "query",
          "description" : "An optional comma separated list of json properties to include in the response.  If this field is not supplied, then any field not listed in the 'excludes' parameter are returned.  When using the 'expands' parameter, you can use 'dot' path notation to reference inclusion of nested properties.",
          "style" : "pipeDelimited",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "exclude",
          "in" : "query",
          "description" : "An optional comma separated list of json properties you specifically do not want to be included in the response. When using the 'expands' parameter, you can use 'dot' path notation to reference exclusion of nested properties.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "An optional comma separated lists of relationship names that should be expanded in the response. You can reference any number of nesting using 'dot' path notation.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetSupplierResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Supplier" ],
        "description" : "Updates an existing Supplier resource.  Properties of the existing resource that are not supplied in the request body will not be updated.",
        "operationId" : "PUT--suppliers-supplierId",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateSupplierRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateSupplierResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Supplier" ],
        "description" : "Deletes an existing Supplier resource.",
        "operationId" : "DELETE--suppliers-supplierId",
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "supplierId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "number"
        }
      } ]
    },
    "/territories/:territoryId" : {
      "get" : {
        "tags" : [ "Territory" ],
        "description" : "A specific Territory object",
        "operationId" : "GET--territories-:territoryId",
        "parameters" : [ {
          "name" : "include",
          "in" : "query",
          "description" : "An optional comma separated list of json properties to include in the response.  If this field is not supplied, then any field not listed in the 'excludes' parameter are returned.  When using the 'expands' parameter, you can use 'dot' path notation to reference inclusion of nested properties.",
          "style" : "pipeDelimited",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "exclude",
          "in" : "query",
          "description" : "An optional comma separated list of json properties you specifically do not want to be included in the response. When using the 'expands' parameter, you can use 'dot' path notation to reference exclusion of nested properties.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "An optional comma separated lists of relationship names that should be expanded in the response. You can reference any number of nesting using 'dot' path notation.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTerritoryResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Territory" ],
        "description" : "Updates an existing Territory resource.  Properties of the existing resource that are not supplied in the request body will not be updated.",
        "operationId" : "PUT--territories-:territoryId",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateTerritoryRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateTerritoryResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Territory" ],
        "description" : "Deletes an existing Territory resource.",
        "operationId" : "DELETE--territories-:territoryId",
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "territoryId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/urls/:id" : {
      "get" : {
        "tags" : [ "Url" ],
        "description" : "A specific Url object",
        "operationId" : "GET--urls-:id",
        "parameters" : [ {
          "name" : "include",
          "in" : "query",
          "description" : "An optional comma separated list of json properties to include in the response.  If this field is not supplied, then any field not listed in the 'excludes' parameter are returned.  When using the 'expands' parameter, you can use 'dot' path notation to reference inclusion of nested properties.",
          "style" : "pipeDelimited",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "exclude",
          "in" : "query",
          "description" : "An optional comma separated list of json properties you specifically do not want to be included in the response. When using the 'expands' parameter, you can use 'dot' path notation to reference exclusion of nested properties.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "An optional comma separated lists of relationship names that should be expanded in the response. You can reference any number of nesting using 'dot' path notation.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetUrlResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Url" ],
        "description" : "Updates an existing Url resource.  Properties of the existing resource that are not supplied in the request body will not be updated.",
        "operationId" : "PUT--urls-:id",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateUrlRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateUrlResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Url" ],
        "description" : "Deletes an existing Url resource.",
        "operationId" : "DELETE--urls-:id",
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/categories/{categoryId}/products" : {
      "parameters" : [ {
        "name" : "categoryId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "number"
        }
      } ]
    },
    "/customerDemographics/:customerTypeId/customers" : {
      "parameters" : [ {
        "name" : "customerTypeId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/customers/:customerId/customerDemographics" : {
      "parameters" : [ {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/customers/:customerId/orders" : {
      "parameters" : [ {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/employees/{employeeId}/orderDetails" : {
      "parameters" : [ {
        "name" : "employeeId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "number"
        }
      } ]
    },
    "/employees/{employeeId}/territories" : {
      "parameters" : [ {
        "name" : "employeeId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "number"
        }
      } ]
    },
    "/employees/{employeeId}/employees" : {
      "parameters" : [ {
        "name" : "employeeId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "number"
        }
      } ]
    },
    "/employees/{employeeId}/reportsTo" : {
      "parameters" : [ {
        "name" : "employeeId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "number"
        }
      } ]
    },
    "/employees/{employeeId}/orders" : {
      "parameters" : [ {
        "name" : "employeeId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "number"
        }
      } ]
    },
    "/orderDetails/:id/employees" : {
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/orderDetails/:id/order" : {
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/orderDetails/:id/product" : {
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/orders/{orderId}/orderDetails" : {
      "parameters" : [ {
        "name" : "orderId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "number"
        }
      } ]
    },
    "/orders/{orderId}/customer" : {
      "parameters" : [ {
        "name" : "orderId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "number"
        }
      } ]
    },
    "/orders/{orderId}/employee" : {
      "parameters" : [ {
        "name" : "orderId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "number"
        }
      } ]
    },
    "/orders/{orderId}/shipVia" : {
      "parameters" : [ {
        "name" : "orderId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "number"
        }
      } ]
    },
    "/products/{productId}/orderDetails" : {
      "parameters" : [ {
        "name" : "productId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "number"
        }
      } ]
    },
    "/products/{productId}/category" : {
      "parameters" : [ {
        "name" : "productId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "number"
        }
      } ]
    },
    "/products/{productId}/supplier" : {
      "parameters" : [ {
        "name" : "productId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "number"
        }
      } ]
    },
    "/regions/{regionId}/territories" : {
      "parameters" : [ {
        "name" : "regionId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "number"
        }
      } ]
    },
    "/shippers/{shipperId}/orders" : {
      "parameters" : [ {
        "name" : "shipperId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "number"
        }
      } ]
    },
    "/suppliers/{supplierId}/products" : {
      "parameters" : [ {
        "name" : "supplierId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "number"
        }
      } ]
    },
    "/territories/:territoryId/employees" : {
      "parameters" : [ {
        "name" : "territoryId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/territories/:territoryId/region" : {
      "parameters" : [ {
        "name" : "territoryId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    }
  },
  "components" : {
    "schemas" : {
      "CreateCustomerDemographicResponse" : {
        "required" : [ "customerTypeId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "customers" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "customerTypeId" : {
            "type" : "string"
          },
          "customerDesc" : {
            "type" : "string",
            "nullable" : true
          },
          "customers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateCustomerResponse"
            }
          }
        }
      },
      "UpdateRegionResponse" : {
        "required" : [ "regionId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "territories" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "regionId" : {
            "type" : "number"
          },
          "regionDescription" : {
            "type" : "string"
          },
          "territories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateTerritoryResponse"
            }
          }
        }
      },
      "CreateTerritoryResponse" : {
        "required" : [ "territoryId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "employees" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "region" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "territoryId" : {
            "type" : "string"
          },
          "territoryDescription" : {
            "type" : "string"
          },
          "regionId" : {
            "type" : "number",
            "nullable" : true
          },
          "employees" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateEmployeeResponse"
            }
          },
          "region" : {
            "$ref" : "#/components/schemas/CreateRegionResponse"
          }
        }
      },
      "_links" : {
        "properties" : {
          "self" : {
            "properties" : {
              "href" : {
                "type" : "string"
              }
            }
          },
          "first" : {
            "properties" : {
              "href" : {
                "type" : "string"
              }
            }
          },
          "prev" : {
            "properties" : {
              "href" : {
                "type" : "string"
              }
            }
          },
          "next" : {
            "properties" : {
              "href" : {
                "type" : "string"
              }
            }
          },
          "last" : {
            "properties" : {
              "href" : {
                "type" : "string"
              }
            }
          },
          "after" : {
            "properties" : {
              "href" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "UpdateTerritoryResponse" : {
        "required" : [ "territoryId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "employees" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "region" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "territoryId" : {
            "type" : "string"
          },
          "territoryDescription" : {
            "type" : "string"
          },
          "regionId" : {
            "type" : "number",
            "nullable" : true
          },
          "employees" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateEmployeeResponse"
            }
          },
          "region" : {
            "$ref" : "#/components/schemas/UpdateRegionResponse"
          }
        }
      },
      "UpdateRegionRequest" : {
        "required" : [ "regionId" ],
        "type" : "object",
        "properties" : {
          "regionId" : {
            "type" : "number"
          },
          "regionDescription" : {
            "type" : "string"
          },
          "territories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateTerritoryRequest"
            }
          }
        }
      },
      "ListIndexLogsResponse" : {
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/_links"
          },
          "page" : {
            "type" : "number"
          },
          "size" : {
            "type" : "number"
          },
          "total" : {
            "type" : "number"
          },
          "_embedded" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetIndexLogResponse"
            }
          }
        }
      },
      "UpdateProductRequest" : {
        "required" : [ "productId" ],
        "type" : "object",
        "properties" : {
          "productId" : {
            "type" : "number"
          },
          "productName" : {
            "type" : "string"
          },
          "supplierId" : {
            "type" : "number",
            "nullable" : true
          },
          "categoryId" : {
            "type" : "number",
            "nullable" : true
          },
          "quantityPerUnit" : {
            "type" : "string",
            "nullable" : true
          },
          "unitPrice" : {
            "type" : "number",
            "nullable" : true
          },
          "unitsInStock" : {
            "type" : "number",
            "nullable" : true
          },
          "unitsOnOrder" : {
            "type" : "number",
            "nullable" : true
          },
          "reorderLevel" : {
            "type" : "number",
            "nullable" : true
          },
          "discontinued" : {
            "type" : "boolean"
          },
          "orderDetails" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateOrderDetailRequest"
            }
          },
          "category" : {
            "$ref" : "#/components/schemas/UpdateCategoryRequest"
          },
          "supplier" : {
            "$ref" : "#/components/schemas/UpdateSupplierRequest"
          }
        }
      },
      "UpdateOrderResponse" : {
        "required" : [ "orderId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "orderDetails" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "customer" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "employee" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "shipVia" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "orderId" : {
            "type" : "number"
          },
          "customerId" : {
            "type" : "string",
            "nullable" : true
          },
          "employeeId" : {
            "type" : "number",
            "nullable" : true
          },
          "orderDate" : {
            "type" : "string",
            "nullable" : true
          },
          "requiredDate" : {
            "type" : "string",
            "nullable" : true
          },
          "shippedDate" : {
            "type" : "string",
            "nullable" : true
          },
          "shipViaShipperId" : {
            "type" : "number",
            "nullable" : true
          },
          "freight" : {
            "type" : "number",
            "nullable" : true
          },
          "shipName" : {
            "type" : "string",
            "nullable" : true
          },
          "shipAddress" : {
            "type" : "string",
            "nullable" : true
          },
          "shipCity" : {
            "type" : "string",
            "nullable" : true
          },
          "shipRegion" : {
            "type" : "string",
            "nullable" : true
          },
          "shipPostalCode" : {
            "type" : "string",
            "nullable" : true
          },
          "shipCountry" : {
            "type" : "string",
            "nullable" : true
          },
          "orderDetails" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateOrderDetailResponse"
            }
          },
          "customer" : {
            "$ref" : "#/components/schemas/UpdateCustomerResponse"
          },
          "employee" : {
            "$ref" : "#/components/schemas/UpdateEmployeeResponse"
          },
          "shipVia" : {
            "$ref" : "#/components/schemas/UpdateShipperResponse"
          }
        }
      },
      "ListCategoriesResponse" : {
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/_links"
          },
          "page" : {
            "type" : "number"
          },
          "size" : {
            "type" : "number"
          },
          "total" : {
            "type" : "number"
          },
          "_embedded" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetCategoryResponse"
            }
          }
        }
      },
      "CreateEmployeeResponse" : {
        "required" : [ "employeeId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "orderDetails" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "territories" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "employees" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "reportsTo" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "orders" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "employeeId" : {
            "type" : "number"
          },
          "lastName" : {
            "type" : "string"
          },
          "firstName" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string",
            "nullable" : true
          },
          "titleOfCourtesy" : {
            "type" : "string",
            "nullable" : true
          },
          "birthDate" : {
            "type" : "string",
            "nullable" : true
          },
          "hireDate" : {
            "type" : "string",
            "nullable" : true
          },
          "address" : {
            "type" : "string",
            "nullable" : true
          },
          "city" : {
            "type" : "string",
            "nullable" : true
          },
          "region" : {
            "type" : "string",
            "nullable" : true
          },
          "postalCode" : {
            "type" : "string",
            "nullable" : true
          },
          "country" : {
            "type" : "string",
            "nullable" : true
          },
          "homePhone" : {
            "type" : "string",
            "nullable" : true
          },
          "extension" : {
            "type" : "string",
            "nullable" : true
          },
          "notes" : {
            "type" : "string"
          },
          "reportsToEmployeeId" : {
            "type" : "number",
            "nullable" : true
          },
          "photoPath" : {
            "type" : "string",
            "nullable" : true
          },
          "salary" : {
            "type" : "number",
            "nullable" : true
          },
          "orderDetails" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateOrderDetailResponse"
            }
          },
          "territories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateTerritoryResponse"
            }
          },
          "employees" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateEmployeeResponse"
            }
          },
          "reportsTo" : {
            "$ref" : "#/components/schemas/CreateEmployeeResponse"
          },
          "orders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateOrderResponse"
            }
          }
        }
      },
      "UpdateCategoryResponse" : {
        "required" : [ "categoryId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "products" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "categoryId" : {
            "type" : "number"
          },
          "categoryName" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "picture" : {
            "type" : "string",
            "nullable" : true
          },
          "products" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateProductResponse"
            }
          }
        }
      },
      "UpdateOrderDetailResponse" : {
        "required" : [ "orderId", "productId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "employees" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "order" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "product" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "orderId" : {
            "type" : "number"
          },
          "productId" : {
            "type" : "number"
          },
          "unitPrice" : {
            "type" : "number"
          },
          "quantity" : {
            "type" : "number"
          },
          "discount" : {
            "type" : "number"
          },
          "employees" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateEmployeeResponse"
            }
          },
          "order" : {
            "$ref" : "#/components/schemas/UpdateOrderResponse"
          },
          "product" : {
            "$ref" : "#/components/schemas/UpdateProductResponse"
          }
        }
      },
      "UpdateIndexLogRequest" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "tenantCode" : {
            "type" : "string"
          },
          "entityId" : {
            "type" : "number",
            "nullable" : true
          },
          "entityType" : {
            "type" : "string",
            "nullable" : true
          },
          "error" : {
            "type" : "string",
            "nullable" : true
          },
          "noIndex" : {
            "type" : "number",
            "nullable" : true
          },
          "modifiedAt" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "GetTerritoryResponse" : {
        "required" : [ "territoryId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "employees" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "region" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "territoryId" : {
            "type" : "string"
          },
          "territoryDescription" : {
            "type" : "string"
          },
          "regionId" : {
            "type" : "number",
            "nullable" : true
          },
          "employees" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetEmployeeResponse"
            }
          },
          "region" : {
            "$ref" : "#/components/schemas/GetRegionResponse"
          }
        }
      },
      "CreateUrlResponse" : {
        "required" : [ "short", "url" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "url" : {
            "type" : "string"
          },
          "short" : {
            "type" : "string"
          },
          "text" : {
            "type" : "string"
          }
        }
      },
      "UpdateTerritoryRequest" : {
        "required" : [ "territoryId" ],
        "type" : "object",
        "properties" : {
          "territoryId" : {
            "type" : "string"
          },
          "territoryDescription" : {
            "type" : "string"
          },
          "regionId" : {
            "type" : "number",
            "nullable" : true
          },
          "employees" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateEmployeeRequest"
            }
          },
          "region" : {
            "$ref" : "#/components/schemas/UpdateRegionRequest"
          }
        }
      },
      "GetEmployeeResponse" : {
        "required" : [ "employeeId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "orderDetails" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "territories" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "employees" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "reportsTo" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "orders" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "employeeId" : {
            "type" : "number"
          },
          "lastName" : {
            "type" : "string"
          },
          "firstName" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string",
            "nullable" : true
          },
          "titleOfCourtesy" : {
            "type" : "string",
            "nullable" : true
          },
          "birthDate" : {
            "type" : "string",
            "nullable" : true
          },
          "hireDate" : {
            "type" : "string",
            "nullable" : true
          },
          "address" : {
            "type" : "string",
            "nullable" : true
          },
          "city" : {
            "type" : "string",
            "nullable" : true
          },
          "region" : {
            "type" : "string",
            "nullable" : true
          },
          "postalCode" : {
            "type" : "string",
            "nullable" : true
          },
          "country" : {
            "type" : "string",
            "nullable" : true
          },
          "homePhone" : {
            "type" : "string",
            "nullable" : true
          },
          "extension" : {
            "type" : "string",
            "nullable" : true
          },
          "notes" : {
            "type" : "string"
          },
          "reportsToEmployeeId" : {
            "type" : "number",
            "nullable" : true
          },
          "photoPath" : {
            "type" : "string",
            "nullable" : true
          },
          "salary" : {
            "type" : "number",
            "nullable" : true
          },
          "orderDetails" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetOrderDetailResponse"
            }
          },
          "territories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetTerritoryResponse"
            }
          },
          "employees" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetEmployeeResponse"
            }
          },
          "reportsTo" : {
            "$ref" : "#/components/schemas/GetEmployeeResponse"
          },
          "orders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetOrderResponse"
            }
          }
        }
      },
      "UpdateSupplierRequest" : {
        "required" : [ "supplierId" ],
        "type" : "object",
        "properties" : {
          "supplierId" : {
            "type" : "number"
          },
          "companyName" : {
            "type" : "string"
          },
          "contactName" : {
            "type" : "string",
            "nullable" : true
          },
          "contactTitle" : {
            "type" : "string",
            "nullable" : true
          },
          "address" : {
            "type" : "string",
            "nullable" : true
          },
          "city" : {
            "type" : "string",
            "nullable" : true
          },
          "region" : {
            "type" : "string",
            "nullable" : true
          },
          "postalCode" : {
            "type" : "string",
            "nullable" : true
          },
          "country" : {
            "type" : "string",
            "nullable" : true
          },
          "phone" : {
            "type" : "string",
            "nullable" : true
          },
          "fax" : {
            "type" : "string",
            "nullable" : true
          },
          "homePage" : {
            "type" : "string",
            "nullable" : true
          },
          "products" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateProductRequest"
            }
          }
        }
      },
      "CreateCategoryRequest" : {
        "required" : [ "categoryId" ],
        "type" : "object",
        "properties" : {
          "categoryId" : {
            "type" : "number"
          },
          "categoryName" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "picture" : {
            "type" : "string",
            "nullable" : true
          },
          "products" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateProductRequest"
            }
          }
        }
      },
      "CreateOrderDetailRequest" : {
        "required" : [ "orderId", "productId" ],
        "type" : "object",
        "properties" : {
          "orderId" : {
            "type" : "number"
          },
          "productId" : {
            "type" : "number"
          },
          "unitPrice" : {
            "type" : "number"
          },
          "quantity" : {
            "type" : "number"
          },
          "discount" : {
            "type" : "number"
          },
          "employees" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateEmployeeRequest"
            }
          },
          "order" : {
            "$ref" : "#/components/schemas/CreateOrderRequest"
          },
          "product" : {
            "$ref" : "#/components/schemas/CreateProductRequest"
          }
        }
      },
      "CreateTerritoryRequest" : {
        "required" : [ "territoryId" ],
        "type" : "object",
        "properties" : {
          "territoryId" : {
            "type" : "string"
          },
          "territoryDescription" : {
            "type" : "string"
          },
          "regionId" : {
            "type" : "number",
            "nullable" : true
          },
          "employees" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateEmployeeRequest"
            }
          },
          "region" : {
            "$ref" : "#/components/schemas/CreateRegionRequest"
          }
        }
      },
      "GetProductResponse" : {
        "required" : [ "productId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "orderDetails" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "category" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "supplier" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "productId" : {
            "type" : "number"
          },
          "productName" : {
            "type" : "string"
          },
          "supplierId" : {
            "type" : "number",
            "nullable" : true
          },
          "categoryId" : {
            "type" : "number",
            "nullable" : true
          },
          "quantityPerUnit" : {
            "type" : "string",
            "nullable" : true
          },
          "unitPrice" : {
            "type" : "number",
            "nullable" : true
          },
          "unitsInStock" : {
            "type" : "number",
            "nullable" : true
          },
          "unitsOnOrder" : {
            "type" : "number",
            "nullable" : true
          },
          "reorderLevel" : {
            "type" : "number",
            "nullable" : true
          },
          "discontinued" : {
            "type" : "boolean"
          },
          "orderDetails" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetOrderDetailResponse"
            }
          },
          "category" : {
            "$ref" : "#/components/schemas/GetCategoryResponse"
          },
          "supplier" : {
            "$ref" : "#/components/schemas/GetSupplierResponse"
          }
        }
      },
      "UpdateShipperResponse" : {
        "required" : [ "shipperId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "orders" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "shipperId" : {
            "type" : "number"
          },
          "companyName" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string",
            "nullable" : true
          },
          "orders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateOrderResponse"
            }
          }
        }
      },
      "UpdateCategoryRequest" : {
        "required" : [ "categoryId" ],
        "type" : "object",
        "properties" : {
          "categoryId" : {
            "type" : "number"
          },
          "categoryName" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "picture" : {
            "type" : "string",
            "nullable" : true
          },
          "products" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateProductRequest"
            }
          }
        }
      },
      "CreateRegionResponse" : {
        "required" : [ "regionId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "territories" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "regionId" : {
            "type" : "number"
          },
          "regionDescription" : {
            "type" : "string"
          },
          "territories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateTerritoryResponse"
            }
          }
        }
      },
      "CreateProductResponse" : {
        "required" : [ "productId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "orderDetails" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "category" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "supplier" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "productId" : {
            "type" : "number"
          },
          "productName" : {
            "type" : "string"
          },
          "supplierId" : {
            "type" : "number",
            "nullable" : true
          },
          "categoryId" : {
            "type" : "number",
            "nullable" : true
          },
          "quantityPerUnit" : {
            "type" : "string",
            "nullable" : true
          },
          "unitPrice" : {
            "type" : "number",
            "nullable" : true
          },
          "unitsInStock" : {
            "type" : "number",
            "nullable" : true
          },
          "unitsOnOrder" : {
            "type" : "number",
            "nullable" : true
          },
          "reorderLevel" : {
            "type" : "number",
            "nullable" : true
          },
          "discontinued" : {
            "type" : "boolean"
          },
          "orderDetails" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateOrderDetailResponse"
            }
          },
          "category" : {
            "$ref" : "#/components/schemas/CreateCategoryResponse"
          },
          "supplier" : {
            "$ref" : "#/components/schemas/CreateSupplierResponse"
          }
        }
      },
      "CreateCustomerDemographicRequest" : {
        "required" : [ "customerTypeId" ],
        "type" : "object",
        "properties" : {
          "customerTypeId" : {
            "type" : "string"
          },
          "customerDesc" : {
            "type" : "string",
            "nullable" : true
          },
          "customers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateCustomerRequest"
            }
          }
        }
      },
      "GetOrderDetailResponse" : {
        "required" : [ "orderId", "productId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "employees" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "order" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "product" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "orderId" : {
            "type" : "number"
          },
          "productId" : {
            "type" : "number"
          },
          "unitPrice" : {
            "type" : "number"
          },
          "quantity" : {
            "type" : "number"
          },
          "discount" : {
            "type" : "number"
          },
          "employees" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetEmployeeResponse"
            }
          },
          "order" : {
            "$ref" : "#/components/schemas/GetOrderResponse"
          },
          "product" : {
            "$ref" : "#/components/schemas/GetProductResponse"
          }
        }
      },
      "CreateProductRequest" : {
        "required" : [ "productId" ],
        "type" : "object",
        "properties" : {
          "productId" : {
            "type" : "number"
          },
          "productName" : {
            "type" : "string"
          },
          "supplierId" : {
            "type" : "number",
            "nullable" : true
          },
          "categoryId" : {
            "type" : "number",
            "nullable" : true
          },
          "quantityPerUnit" : {
            "type" : "string",
            "nullable" : true
          },
          "unitPrice" : {
            "type" : "number",
            "nullable" : true
          },
          "unitsInStock" : {
            "type" : "number",
            "nullable" : true
          },
          "unitsOnOrder" : {
            "type" : "number",
            "nullable" : true
          },
          "reorderLevel" : {
            "type" : "number",
            "nullable" : true
          },
          "discontinued" : {
            "type" : "boolean"
          },
          "orderDetails" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateOrderDetailRequest"
            }
          },
          "category" : {
            "$ref" : "#/components/schemas/CreateCategoryRequest"
          },
          "supplier" : {
            "$ref" : "#/components/schemas/CreateSupplierRequest"
          }
        }
      },
      "UpdateUrlRequest" : {
        "required" : [ "short", "url" ],
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string"
          },
          "short" : {
            "type" : "string"
          },
          "text" : {
            "type" : "string"
          }
        }
      },
      "CreateSupplierResponse" : {
        "required" : [ "supplierId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "products" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "supplierId" : {
            "type" : "number"
          },
          "companyName" : {
            "type" : "string"
          },
          "contactName" : {
            "type" : "string",
            "nullable" : true
          },
          "contactTitle" : {
            "type" : "string",
            "nullable" : true
          },
          "address" : {
            "type" : "string",
            "nullable" : true
          },
          "city" : {
            "type" : "string",
            "nullable" : true
          },
          "region" : {
            "type" : "string",
            "nullable" : true
          },
          "postalCode" : {
            "type" : "string",
            "nullable" : true
          },
          "country" : {
            "type" : "string",
            "nullable" : true
          },
          "phone" : {
            "type" : "string",
            "nullable" : true
          },
          "fax" : {
            "type" : "string",
            "nullable" : true
          },
          "homePage" : {
            "type" : "string",
            "nullable" : true
          },
          "products" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateProductResponse"
            }
          }
        }
      },
      "GetCustomerResponse" : {
        "required" : [ "customerId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "customerDemographics" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "orders" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "customerId" : {
            "type" : "string"
          },
          "companyName" : {
            "type" : "string"
          },
          "contactName" : {
            "type" : "string",
            "nullable" : true
          },
          "contactTitle" : {
            "type" : "string",
            "nullable" : true
          },
          "address" : {
            "type" : "string",
            "nullable" : true
          },
          "city" : {
            "type" : "string",
            "nullable" : true
          },
          "region" : {
            "type" : "string",
            "nullable" : true
          },
          "postalCode" : {
            "type" : "string",
            "nullable" : true
          },
          "country" : {
            "type" : "string",
            "nullable" : true
          },
          "phone" : {
            "type" : "string",
            "nullable" : true
          },
          "fax" : {
            "type" : "string",
            "nullable" : true
          },
          "customerDemographics" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetCustomerDemographicResponse"
            }
          },
          "orders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetOrderResponse"
            }
          }
        }
      },
      "GetCategoryResponse" : {
        "required" : [ "categoryId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "products" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "categoryId" : {
            "type" : "number"
          },
          "categoryName" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "picture" : {
            "type" : "string",
            "nullable" : true
          },
          "products" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetProductResponse"
            }
          }
        }
      },
      "GetRegionResponse" : {
        "required" : [ "regionId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "territories" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "regionId" : {
            "type" : "number"
          },
          "regionDescription" : {
            "type" : "string"
          },
          "territories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetTerritoryResponse"
            }
          }
        }
      },
      "UpdateCustomerDemographicRequest" : {
        "required" : [ "customerTypeId" ],
        "type" : "object",
        "properties" : {
          "customerTypeId" : {
            "type" : "string"
          },
          "customerDesc" : {
            "type" : "string",
            "nullable" : true
          },
          "customers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateCustomerRequest"
            }
          }
        }
      },
      "CreateOrderRequest" : {
        "required" : [ "orderId" ],
        "type" : "object",
        "properties" : {
          "orderId" : {
            "type" : "number"
          },
          "customerId" : {
            "type" : "string",
            "nullable" : true
          },
          "employeeId" : {
            "type" : "number",
            "nullable" : true
          },
          "orderDate" : {
            "type" : "string",
            "nullable" : true
          },
          "requiredDate" : {
            "type" : "string",
            "nullable" : true
          },
          "shippedDate" : {
            "type" : "string",
            "nullable" : true
          },
          "shipViaShipperId" : {
            "type" : "number",
            "nullable" : true
          },
          "freight" : {
            "type" : "number",
            "nullable" : true
          },
          "shipName" : {
            "type" : "string",
            "nullable" : true
          },
          "shipAddress" : {
            "type" : "string",
            "nullable" : true
          },
          "shipCity" : {
            "type" : "string",
            "nullable" : true
          },
          "shipRegion" : {
            "type" : "string",
            "nullable" : true
          },
          "shipPostalCode" : {
            "type" : "string",
            "nullable" : true
          },
          "shipCountry" : {
            "type" : "string",
            "nullable" : true
          },
          "orderDetails" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateOrderDetailRequest"
            }
          },
          "customer" : {
            "$ref" : "#/components/schemas/CreateCustomerRequest"
          },
          "employee" : {
            "$ref" : "#/components/schemas/CreateEmployeeRequest"
          },
          "shipVia" : {
            "$ref" : "#/components/schemas/CreateShipperRequest"
          }
        }
      },
      "ListCustomerDemographicsResponse" : {
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/_links"
          },
          "page" : {
            "type" : "number"
          },
          "size" : {
            "type" : "number"
          },
          "total" : {
            "type" : "number"
          },
          "_embedded" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetCustomerDemographicResponse"
            }
          }
        }
      },
      "ListUrlsResponse" : {
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/_links"
          },
          "page" : {
            "type" : "number"
          },
          "size" : {
            "type" : "number"
          },
          "total" : {
            "type" : "number"
          },
          "_embedded" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetUrlResponse"
            }
          }
        }
      },
      "error" : {
        "properties" : {
          "status" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          },
          "error" : {
            "type" : "string"
          }
        }
      },
      "CreateOrderDetailResponse" : {
        "required" : [ "orderId", "productId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "employees" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "order" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "product" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "orderId" : {
            "type" : "number"
          },
          "productId" : {
            "type" : "number"
          },
          "unitPrice" : {
            "type" : "number"
          },
          "quantity" : {
            "type" : "number"
          },
          "discount" : {
            "type" : "number"
          },
          "employees" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateEmployeeResponse"
            }
          },
          "order" : {
            "$ref" : "#/components/schemas/CreateOrderResponse"
          },
          "product" : {
            "$ref" : "#/components/schemas/CreateProductResponse"
          }
        }
      },
      "UpdateCustomerResponse" : {
        "required" : [ "customerId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "customerDemographics" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "orders" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "customerId" : {
            "type" : "string"
          },
          "companyName" : {
            "type" : "string"
          },
          "contactName" : {
            "type" : "string",
            "nullable" : true
          },
          "contactTitle" : {
            "type" : "string",
            "nullable" : true
          },
          "address" : {
            "type" : "string",
            "nullable" : true
          },
          "city" : {
            "type" : "string",
            "nullable" : true
          },
          "region" : {
            "type" : "string",
            "nullable" : true
          },
          "postalCode" : {
            "type" : "string",
            "nullable" : true
          },
          "country" : {
            "type" : "string",
            "nullable" : true
          },
          "phone" : {
            "type" : "string",
            "nullable" : true
          },
          "fax" : {
            "type" : "string",
            "nullable" : true
          },
          "customerDemographics" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateCustomerDemographicResponse"
            }
          },
          "orders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateOrderResponse"
            }
          }
        }
      },
      "GetIndexLogResponse" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "id" : {
            "type" : "number"
          },
          "tenantCode" : {
            "type" : "string"
          },
          "entityId" : {
            "type" : "number",
            "nullable" : true
          },
          "entityType" : {
            "type" : "string",
            "nullable" : true
          },
          "error" : {
            "type" : "string",
            "nullable" : true
          },
          "noIndex" : {
            "type" : "number",
            "nullable" : true
          },
          "modifiedAt" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "CreateRegionRequest" : {
        "required" : [ "regionId" ],
        "type" : "object",
        "properties" : {
          "regionId" : {
            "type" : "number"
          },
          "regionDescription" : {
            "type" : "string"
          },
          "territories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateTerritoryRequest"
            }
          }
        }
      },
      "ListOrderDetailsResponse" : {
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/_links"
          },
          "page" : {
            "type" : "number"
          },
          "size" : {
            "type" : "number"
          },
          "total" : {
            "type" : "number"
          },
          "_embedded" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetOrderDetailResponse"
            }
          }
        }
      },
      "ListTerritoriesResponse" : {
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/_links"
          },
          "page" : {
            "type" : "number"
          },
          "size" : {
            "type" : "number"
          },
          "total" : {
            "type" : "number"
          },
          "_embedded" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetTerritoryResponse"
            }
          }
        }
      },
      "ListCustomersResponse" : {
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/_links"
          },
          "page" : {
            "type" : "number"
          },
          "size" : {
            "type" : "number"
          },
          "total" : {
            "type" : "number"
          },
          "_embedded" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetCustomerResponse"
            }
          }
        }
      },
      "UpdateUrlResponse" : {
        "required" : [ "short", "url" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "url" : {
            "type" : "string"
          },
          "short" : {
            "type" : "string"
          },
          "text" : {
            "type" : "string"
          }
        }
      },
      "CreateOrderResponse" : {
        "required" : [ "orderId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "orderDetails" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "customer" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "employee" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "shipVia" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "orderId" : {
            "type" : "number"
          },
          "customerId" : {
            "type" : "string",
            "nullable" : true
          },
          "employeeId" : {
            "type" : "number",
            "nullable" : true
          },
          "orderDate" : {
            "type" : "string",
            "nullable" : true
          },
          "requiredDate" : {
            "type" : "string",
            "nullable" : true
          },
          "shippedDate" : {
            "type" : "string",
            "nullable" : true
          },
          "shipViaShipperId" : {
            "type" : "number",
            "nullable" : true
          },
          "freight" : {
            "type" : "number",
            "nullable" : true
          },
          "shipName" : {
            "type" : "string",
            "nullable" : true
          },
          "shipAddress" : {
            "type" : "string",
            "nullable" : true
          },
          "shipCity" : {
            "type" : "string",
            "nullable" : true
          },
          "shipRegion" : {
            "type" : "string",
            "nullable" : true
          },
          "shipPostalCode" : {
            "type" : "string",
            "nullable" : true
          },
          "shipCountry" : {
            "type" : "string",
            "nullable" : true
          },
          "orderDetails" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateOrderDetailResponse"
            }
          },
          "customer" : {
            "$ref" : "#/components/schemas/CreateCustomerResponse"
          },
          "employee" : {
            "$ref" : "#/components/schemas/CreateEmployeeResponse"
          },
          "shipVia" : {
            "$ref" : "#/components/schemas/CreateShipperResponse"
          }
        }
      },
      "CreateIndexLogResponse" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "id" : {
            "type" : "number"
          },
          "tenantCode" : {
            "type" : "string"
          },
          "entityId" : {
            "type" : "number",
            "nullable" : true
          },
          "entityType" : {
            "type" : "string",
            "nullable" : true
          },
          "error" : {
            "type" : "string",
            "nullable" : true
          },
          "noIndex" : {
            "type" : "number",
            "nullable" : true
          },
          "modifiedAt" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "UpdateOrderRequest" : {
        "required" : [ "orderId" ],
        "type" : "object",
        "properties" : {
          "orderId" : {
            "type" : "number"
          },
          "customerId" : {
            "type" : "string",
            "nullable" : true
          },
          "employeeId" : {
            "type" : "number",
            "nullable" : true
          },
          "orderDate" : {
            "type" : "string",
            "nullable" : true
          },
          "requiredDate" : {
            "type" : "string",
            "nullable" : true
          },
          "shippedDate" : {
            "type" : "string",
            "nullable" : true
          },
          "shipViaShipperId" : {
            "type" : "number",
            "nullable" : true
          },
          "freight" : {
            "type" : "number",
            "nullable" : true
          },
          "shipName" : {
            "type" : "string",
            "nullable" : true
          },
          "shipAddress" : {
            "type" : "string",
            "nullable" : true
          },
          "shipCity" : {
            "type" : "string",
            "nullable" : true
          },
          "shipRegion" : {
            "type" : "string",
            "nullable" : true
          },
          "shipPostalCode" : {
            "type" : "string",
            "nullable" : true
          },
          "shipCountry" : {
            "type" : "string",
            "nullable" : true
          },
          "orderDetails" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateOrderDetailRequest"
            }
          },
          "customer" : {
            "$ref" : "#/components/schemas/UpdateCustomerRequest"
          },
          "employee" : {
            "$ref" : "#/components/schemas/UpdateEmployeeRequest"
          },
          "shipVia" : {
            "$ref" : "#/components/schemas/UpdateShipperRequest"
          }
        }
      },
      "UpdateProductResponse" : {
        "required" : [ "productId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "orderDetails" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "category" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "supplier" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "productId" : {
            "type" : "number"
          },
          "productName" : {
            "type" : "string"
          },
          "supplierId" : {
            "type" : "number",
            "nullable" : true
          },
          "categoryId" : {
            "type" : "number",
            "nullable" : true
          },
          "quantityPerUnit" : {
            "type" : "string",
            "nullable" : true
          },
          "unitPrice" : {
            "type" : "number",
            "nullable" : true
          },
          "unitsInStock" : {
            "type" : "number",
            "nullable" : true
          },
          "unitsOnOrder" : {
            "type" : "number",
            "nullable" : true
          },
          "reorderLevel" : {
            "type" : "number",
            "nullable" : true
          },
          "discontinued" : {
            "type" : "boolean"
          },
          "orderDetails" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateOrderDetailResponse"
            }
          },
          "category" : {
            "$ref" : "#/components/schemas/UpdateCategoryResponse"
          },
          "supplier" : {
            "$ref" : "#/components/schemas/UpdateSupplierResponse"
          }
        }
      },
      "UpdateEmployeeRequest" : {
        "required" : [ "employeeId" ],
        "type" : "object",
        "properties" : {
          "employeeId" : {
            "type" : "number"
          },
          "lastName" : {
            "type" : "string"
          },
          "firstName" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string",
            "nullable" : true
          },
          "titleOfCourtesy" : {
            "type" : "string",
            "nullable" : true
          },
          "birthDate" : {
            "type" : "string",
            "nullable" : true
          },
          "hireDate" : {
            "type" : "string",
            "nullable" : true
          },
          "address" : {
            "type" : "string",
            "nullable" : true
          },
          "city" : {
            "type" : "string",
            "nullable" : true
          },
          "region" : {
            "type" : "string",
            "nullable" : true
          },
          "postalCode" : {
            "type" : "string",
            "nullable" : true
          },
          "country" : {
            "type" : "string",
            "nullable" : true
          },
          "homePhone" : {
            "type" : "string",
            "nullable" : true
          },
          "extension" : {
            "type" : "string",
            "nullable" : true
          },
          "notes" : {
            "type" : "string"
          },
          "reportsToEmployeeId" : {
            "type" : "number",
            "nullable" : true
          },
          "photoPath" : {
            "type" : "string",
            "nullable" : true
          },
          "salary" : {
            "type" : "number",
            "nullable" : true
          },
          "orderDetails" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateOrderDetailRequest"
            }
          },
          "territories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateTerritoryRequest"
            }
          },
          "employees" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateEmployeeRequest"
            }
          },
          "reportsTo" : {
            "$ref" : "#/components/schemas/UpdateEmployeeRequest"
          },
          "orders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateOrderRequest"
            }
          }
        }
      },
      "UpdateSupplierResponse" : {
        "required" : [ "supplierId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "products" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "supplierId" : {
            "type" : "number"
          },
          "companyName" : {
            "type" : "string"
          },
          "contactName" : {
            "type" : "string",
            "nullable" : true
          },
          "contactTitle" : {
            "type" : "string",
            "nullable" : true
          },
          "address" : {
            "type" : "string",
            "nullable" : true
          },
          "city" : {
            "type" : "string",
            "nullable" : true
          },
          "region" : {
            "type" : "string",
            "nullable" : true
          },
          "postalCode" : {
            "type" : "string",
            "nullable" : true
          },
          "country" : {
            "type" : "string",
            "nullable" : true
          },
          "phone" : {
            "type" : "string",
            "nullable" : true
          },
          "fax" : {
            "type" : "string",
            "nullable" : true
          },
          "homePage" : {
            "type" : "string",
            "nullable" : true
          },
          "products" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateProductResponse"
            }
          }
        }
      },
      "CreateShipperResponse" : {
        "required" : [ "shipperId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "orders" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "shipperId" : {
            "type" : "number"
          },
          "companyName" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string",
            "nullable" : true
          },
          "orders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateOrderResponse"
            }
          }
        }
      },
      "ListEmployeesResponse" : {
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/_links"
          },
          "page" : {
            "type" : "number"
          },
          "size" : {
            "type" : "number"
          },
          "total" : {
            "type" : "number"
          },
          "_embedded" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetEmployeeResponse"
            }
          }
        }
      },
      "CreateShipperRequest" : {
        "required" : [ "shipperId" ],
        "type" : "object",
        "properties" : {
          "shipperId" : {
            "type" : "number"
          },
          "companyName" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string",
            "nullable" : true
          },
          "orders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateOrderRequest"
            }
          }
        }
      },
      "ListProductsResponse" : {
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/_links"
          },
          "page" : {
            "type" : "number"
          },
          "size" : {
            "type" : "number"
          },
          "total" : {
            "type" : "number"
          },
          "_embedded" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetProductResponse"
            }
          }
        }
      },
      "CreateCustomerRequest" : {
        "required" : [ "customerId" ],
        "type" : "object",
        "properties" : {
          "customerId" : {
            "type" : "string"
          },
          "companyName" : {
            "type" : "string"
          },
          "contactName" : {
            "type" : "string",
            "nullable" : true
          },
          "contactTitle" : {
            "type" : "string",
            "nullable" : true
          },
          "address" : {
            "type" : "string",
            "nullable" : true
          },
          "city" : {
            "type" : "string",
            "nullable" : true
          },
          "region" : {
            "type" : "string",
            "nullable" : true
          },
          "postalCode" : {
            "type" : "string",
            "nullable" : true
          },
          "country" : {
            "type" : "string",
            "nullable" : true
          },
          "phone" : {
            "type" : "string",
            "nullable" : true
          },
          "fax" : {
            "type" : "string",
            "nullable" : true
          },
          "customerDemographics" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateCustomerDemographicRequest"
            }
          },
          "orders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateOrderRequest"
            }
          }
        }
      },
      "CreateIndexLogRequest" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "tenantCode" : {
            "type" : "string"
          },
          "entityId" : {
            "type" : "number",
            "nullable" : true
          },
          "entityType" : {
            "type" : "string",
            "nullable" : true
          },
          "error" : {
            "type" : "string",
            "nullable" : true
          },
          "noIndex" : {
            "type" : "number",
            "nullable" : true
          },
          "modifiedAt" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "ListShippersResponse" : {
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/_links"
          },
          "page" : {
            "type" : "number"
          },
          "size" : {
            "type" : "number"
          },
          "total" : {
            "type" : "number"
          },
          "_embedded" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetShipperResponse"
            }
          }
        }
      },
      "GetOrderResponse" : {
        "required" : [ "orderId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "orderDetails" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "customer" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "employee" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "shipVia" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "orderId" : {
            "type" : "number"
          },
          "customerId" : {
            "type" : "string",
            "nullable" : true
          },
          "employeeId" : {
            "type" : "number",
            "nullable" : true
          },
          "orderDate" : {
            "type" : "string",
            "nullable" : true
          },
          "requiredDate" : {
            "type" : "string",
            "nullable" : true
          },
          "shippedDate" : {
            "type" : "string",
            "nullable" : true
          },
          "shipViaShipperId" : {
            "type" : "number",
            "nullable" : true
          },
          "freight" : {
            "type" : "number",
            "nullable" : true
          },
          "shipName" : {
            "type" : "string",
            "nullable" : true
          },
          "shipAddress" : {
            "type" : "string",
            "nullable" : true
          },
          "shipCity" : {
            "type" : "string",
            "nullable" : true
          },
          "shipRegion" : {
            "type" : "string",
            "nullable" : true
          },
          "shipPostalCode" : {
            "type" : "string",
            "nullable" : true
          },
          "shipCountry" : {
            "type" : "string",
            "nullable" : true
          },
          "orderDetails" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetOrderDetailResponse"
            }
          },
          "customer" : {
            "$ref" : "#/components/schemas/GetCustomerResponse"
          },
          "employee" : {
            "$ref" : "#/components/schemas/GetEmployeeResponse"
          },
          "shipVia" : {
            "$ref" : "#/components/schemas/GetShipperResponse"
          }
        }
      },
      "UpdateShipperRequest" : {
        "required" : [ "shipperId" ],
        "type" : "object",
        "properties" : {
          "shipperId" : {
            "type" : "number"
          },
          "companyName" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string",
            "nullable" : true
          },
          "orders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateOrderRequest"
            }
          }
        }
      },
      "UpdateCustomerDemographicResponse" : {
        "required" : [ "customerTypeId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "customers" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "customerTypeId" : {
            "type" : "string"
          },
          "customerDesc" : {
            "type" : "string",
            "nullable" : true
          },
          "customers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateCustomerResponse"
            }
          }
        }
      },
      "GetShipperResponse" : {
        "required" : [ "shipperId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "orders" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "shipperId" : {
            "type" : "number"
          },
          "companyName" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string",
            "nullable" : true
          },
          "orders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetOrderResponse"
            }
          }
        }
      },
      "ListRegionsResponse" : {
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/_links"
          },
          "page" : {
            "type" : "number"
          },
          "size" : {
            "type" : "number"
          },
          "total" : {
            "type" : "number"
          },
          "_embedded" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetRegionResponse"
            }
          }
        }
      },
      "CreateSupplierRequest" : {
        "required" : [ "supplierId" ],
        "type" : "object",
        "properties" : {
          "supplierId" : {
            "type" : "number"
          },
          "companyName" : {
            "type" : "string"
          },
          "contactName" : {
            "type" : "string",
            "nullable" : true
          },
          "contactTitle" : {
            "type" : "string",
            "nullable" : true
          },
          "address" : {
            "type" : "string",
            "nullable" : true
          },
          "city" : {
            "type" : "string",
            "nullable" : true
          },
          "region" : {
            "type" : "string",
            "nullable" : true
          },
          "postalCode" : {
            "type" : "string",
            "nullable" : true
          },
          "country" : {
            "type" : "string",
            "nullable" : true
          },
          "phone" : {
            "type" : "string",
            "nullable" : true
          },
          "fax" : {
            "type" : "string",
            "nullable" : true
          },
          "homePage" : {
            "type" : "string",
            "nullable" : true
          },
          "products" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateProductRequest"
            }
          }
        }
      },
      "UpdateIndexLogResponse" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "id" : {
            "type" : "number"
          },
          "tenantCode" : {
            "type" : "string"
          },
          "entityId" : {
            "type" : "number",
            "nullable" : true
          },
          "entityType" : {
            "type" : "string",
            "nullable" : true
          },
          "error" : {
            "type" : "string",
            "nullable" : true
          },
          "noIndex" : {
            "type" : "number",
            "nullable" : true
          },
          "modifiedAt" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "CreateEmployeeRequest" : {
        "required" : [ "employeeId" ],
        "type" : "object",
        "properties" : {
          "employeeId" : {
            "type" : "number"
          },
          "lastName" : {
            "type" : "string"
          },
          "firstName" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string",
            "nullable" : true
          },
          "titleOfCourtesy" : {
            "type" : "string",
            "nullable" : true
          },
          "birthDate" : {
            "type" : "string",
            "nullable" : true
          },
          "hireDate" : {
            "type" : "string",
            "nullable" : true
          },
          "address" : {
            "type" : "string",
            "nullable" : true
          },
          "city" : {
            "type" : "string",
            "nullable" : true
          },
          "region" : {
            "type" : "string",
            "nullable" : true
          },
          "postalCode" : {
            "type" : "string",
            "nullable" : true
          },
          "country" : {
            "type" : "string",
            "nullable" : true
          },
          "homePhone" : {
            "type" : "string",
            "nullable" : true
          },
          "extension" : {
            "type" : "string",
            "nullable" : true
          },
          "notes" : {
            "type" : "string"
          },
          "reportsToEmployeeId" : {
            "type" : "number",
            "nullable" : true
          },
          "photoPath" : {
            "type" : "string",
            "nullable" : true
          },
          "salary" : {
            "type" : "number",
            "nullable" : true
          },
          "orderDetails" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateOrderDetailRequest"
            }
          },
          "territories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateTerritoryRequest"
            }
          },
          "employees" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateEmployeeRequest"
            }
          },
          "reportsTo" : {
            "$ref" : "#/components/schemas/CreateEmployeeRequest"
          },
          "orders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateOrderRequest"
            }
          }
        }
      },
      "UpdateEmployeeResponse" : {
        "required" : [ "employeeId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "orderDetails" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "territories" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "employees" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "reportsTo" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "orders" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "employeeId" : {
            "type" : "number"
          },
          "lastName" : {
            "type" : "string"
          },
          "firstName" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string",
            "nullable" : true
          },
          "titleOfCourtesy" : {
            "type" : "string",
            "nullable" : true
          },
          "birthDate" : {
            "type" : "string",
            "nullable" : true
          },
          "hireDate" : {
            "type" : "string",
            "nullable" : true
          },
          "address" : {
            "type" : "string",
            "nullable" : true
          },
          "city" : {
            "type" : "string",
            "nullable" : true
          },
          "region" : {
            "type" : "string",
            "nullable" : true
          },
          "postalCode" : {
            "type" : "string",
            "nullable" : true
          },
          "country" : {
            "type" : "string",
            "nullable" : true
          },
          "homePhone" : {
            "type" : "string",
            "nullable" : true
          },
          "extension" : {
            "type" : "string",
            "nullable" : true
          },
          "notes" : {
            "type" : "string"
          },
          "reportsToEmployeeId" : {
            "type" : "number",
            "nullable" : true
          },
          "photoPath" : {
            "type" : "string",
            "nullable" : true
          },
          "salary" : {
            "type" : "number",
            "nullable" : true
          },
          "orderDetails" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateOrderDetailResponse"
            }
          },
          "territories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateTerritoryResponse"
            }
          },
          "employees" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateEmployeeResponse"
            }
          },
          "reportsTo" : {
            "$ref" : "#/components/schemas/UpdateEmployeeResponse"
          },
          "orders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateOrderResponse"
            }
          }
        }
      },
      "GetCustomerDemographicResponse" : {
        "required" : [ "customerTypeId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "customers" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "customerTypeId" : {
            "type" : "string"
          },
          "customerDesc" : {
            "type" : "string",
            "nullable" : true
          },
          "customers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetCustomerResponse"
            }
          }
        }
      },
      "CreateUrlRequest" : {
        "required" : [ "short", "url" ],
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string"
          },
          "short" : {
            "type" : "string"
          },
          "text" : {
            "type" : "string"
          }
        }
      },
      "UpdateOrderDetailRequest" : {
        "required" : [ "orderId", "productId" ],
        "type" : "object",
        "properties" : {
          "orderId" : {
            "type" : "number"
          },
          "productId" : {
            "type" : "number"
          },
          "unitPrice" : {
            "type" : "number"
          },
          "quantity" : {
            "type" : "number"
          },
          "discount" : {
            "type" : "number"
          },
          "employees" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateEmployeeRequest"
            }
          },
          "order" : {
            "$ref" : "#/components/schemas/UpdateOrderRequest"
          },
          "product" : {
            "$ref" : "#/components/schemas/UpdateProductRequest"
          }
        }
      },
      "GetSupplierResponse" : {
        "required" : [ "supplierId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "products" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "supplierId" : {
            "type" : "number"
          },
          "companyName" : {
            "type" : "string"
          },
          "contactName" : {
            "type" : "string",
            "nullable" : true
          },
          "contactTitle" : {
            "type" : "string",
            "nullable" : true
          },
          "address" : {
            "type" : "string",
            "nullable" : true
          },
          "city" : {
            "type" : "string",
            "nullable" : true
          },
          "region" : {
            "type" : "string",
            "nullable" : true
          },
          "postalCode" : {
            "type" : "string",
            "nullable" : true
          },
          "country" : {
            "type" : "string",
            "nullable" : true
          },
          "phone" : {
            "type" : "string",
            "nullable" : true
          },
          "fax" : {
            "type" : "string",
            "nullable" : true
          },
          "homePage" : {
            "type" : "string",
            "nullable" : true
          },
          "products" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetProductResponse"
            }
          }
        }
      },
      "UpdateCustomerRequest" : {
        "required" : [ "customerId" ],
        "type" : "object",
        "properties" : {
          "customerId" : {
            "type" : "string"
          },
          "companyName" : {
            "type" : "string"
          },
          "contactName" : {
            "type" : "string",
            "nullable" : true
          },
          "contactTitle" : {
            "type" : "string",
            "nullable" : true
          },
          "address" : {
            "type" : "string",
            "nullable" : true
          },
          "city" : {
            "type" : "string",
            "nullable" : true
          },
          "region" : {
            "type" : "string",
            "nullable" : true
          },
          "postalCode" : {
            "type" : "string",
            "nullable" : true
          },
          "country" : {
            "type" : "string",
            "nullable" : true
          },
          "phone" : {
            "type" : "string",
            "nullable" : true
          },
          "fax" : {
            "type" : "string",
            "nullable" : true
          },
          "customerDemographics" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateCustomerDemographicRequest"
            }
          },
          "orders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateOrderRequest"
            }
          }
        }
      },
      "CreateCategoryResponse" : {
        "required" : [ "categoryId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "products" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "categoryId" : {
            "type" : "number"
          },
          "categoryName" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "picture" : {
            "type" : "string",
            "nullable" : true
          },
          "products" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateProductResponse"
            }
          }
        }
      },
      "GetUrlResponse" : {
        "required" : [ "short", "url" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "url" : {
            "type" : "string"
          },
          "short" : {
            "type" : "string"
          },
          "text" : {
            "type" : "string"
          }
        }
      },
      "CreateCustomerResponse" : {
        "required" : [ "customerId" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "properties" : {
              "self" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "customerDemographics" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              },
              "orders" : {
                "properties" : {
                  "href" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "customerId" : {
            "type" : "string"
          },
          "companyName" : {
            "type" : "string"
          },
          "contactName" : {
            "type" : "string",
            "nullable" : true
          },
          "contactTitle" : {
            "type" : "string",
            "nullable" : true
          },
          "address" : {
            "type" : "string",
            "nullable" : true
          },
          "city" : {
            "type" : "string",
            "nullable" : true
          },
          "region" : {
            "type" : "string",
            "nullable" : true
          },
          "postalCode" : {
            "type" : "string",
            "nullable" : true
          },
          "country" : {
            "type" : "string",
            "nullable" : true
          },
          "phone" : {
            "type" : "string",
            "nullable" : true
          },
          "fax" : {
            "type" : "string",
            "nullable" : true
          },
          "customerDemographics" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateCustomerDemographicResponse"
            }
          },
          "orders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateOrderResponse"
            }
          }
        }
      },
      "ListOrdersResponse" : {
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/_links"
          },
          "page" : {
            "type" : "number"
          },
          "size" : {
            "type" : "number"
          },
          "total" : {
            "type" : "number"
          },
          "_embedded" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetOrderResponse"
            }
          }
        }
      },
      "ListSuppliersResponse" : {
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/_links"
          },
          "page" : {
            "type" : "number"
          },
          "size" : {
            "type" : "number"
          },
          "total" : {
            "type" : "number"
          },
          "_embedded" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetSupplierResponse"
            }
          }
        }
      }
    },
    "securitySchemes" : { }
  }
}